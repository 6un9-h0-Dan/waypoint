// Code generated by protoc-gen-go. DO NOT EDIT.
// source: release.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Release struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Release) Reset()         { *m = Release{} }
func (m *Release) String() string { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()    {}
func (*Release) Descriptor() ([]byte, []int) {
	return fileDescriptor_e241864f384c76b6, []int{0}
}

func (m *Release) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release.Unmarshal(m, b)
}
func (m *Release) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release.Marshal(b, m, deterministic)
}
func (m *Release) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release.Merge(m, src)
}
func (m *Release) XXX_Size() int {
	return xxx_messageInfo_Release.Size(m)
}
func (m *Release) XXX_DiscardUnknown() {
	xxx_messageInfo_Release.DiscardUnknown(m)
}

var xxx_messageInfo_Release proto.InternalMessageInfo

func (m *Release) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Release_Args struct {
	// args is the list of argument types. This will include some of the
	// standard types in this file (in the Args message namespace) as well
	// as custom types declared by the FuncSpec that the plugin is expected
	// to understand how to decode.
	Args                 []*any.Any `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Release_Args) Reset()         { *m = Release_Args{} }
func (m *Release_Args) String() string { return proto.CompactTextString(m) }
func (*Release_Args) ProtoMessage()    {}
func (*Release_Args) Descriptor() ([]byte, []int) {
	return fileDescriptor_e241864f384c76b6, []int{0, 0}
}

func (m *Release_Args) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release_Args.Unmarshal(m, b)
}
func (m *Release_Args) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release_Args.Marshal(b, m, deterministic)
}
func (m *Release_Args) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release_Args.Merge(m, src)
}
func (m *Release_Args) XXX_Size() int {
	return xxx_messageInfo_Release_Args.Size(m)
}
func (m *Release_Args) XXX_DiscardUnknown() {
	xxx_messageInfo_Release_Args.DiscardUnknown(m)
}

var xxx_messageInfo_Release_Args proto.InternalMessageInfo

func (m *Release_Args) GetArgs() []*any.Any {
	if m != nil {
		return m.Args
	}
	return nil
}

type Release_Resp struct {
	// result is the resulting data type for building.
	Result *any.Any `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// release structure
	Release              *Release `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Release_Resp) Reset()         { *m = Release_Resp{} }
func (m *Release_Resp) String() string { return proto.CompactTextString(m) }
func (*Release_Resp) ProtoMessage()    {}
func (*Release_Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e241864f384c76b6, []int{0, 1}
}

func (m *Release_Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release_Resp.Unmarshal(m, b)
}
func (m *Release_Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release_Resp.Marshal(b, m, deterministic)
}
func (m *Release_Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release_Resp.Merge(m, src)
}
func (m *Release_Resp) XXX_Size() int {
	return xxx_messageInfo_Release_Resp.Size(m)
}
func (m *Release_Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Release_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Release_Resp proto.InternalMessageInfo

func (m *Release_Resp) GetResult() *any.Any {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Release_Resp) GetRelease() *Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func init() {
	proto.RegisterType((*Release)(nil), "proto.Release")
	proto.RegisterType((*Release_Args)(nil), "proto.Release.Args")
	proto.RegisterType((*Release_Resp)(nil), "proto.Release.Resp")
}

func init() {
	proto.RegisterFile("release.proto", fileDescriptor_e241864f384c76b6)
}

var fileDescriptor_e241864f384c76b6 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0x53, 0x41, 0x08, 0x03, 0x12, 0x32, 0x1a, 0x53, 0xd7, 0xc4, 0x10, 0x4f, 0x3d, 0xe8,
	0x62, 0xe0, 0x0b, 0x48, 0x88, 0xde, 0xbc, 0x2c, 0x77, 0x93, 0xd2, 0x0c, 0x1b, 0x92, 0xba, 0xad,
	0xfb, 0xe7, 0xc0, 0x87, 0xf2, 0x13, 0x7a, 0x31, 0xdd, 0xdd, 0x6a, 0xc0, 0x70, 0x6a, 0xe7, 0xbd,
	0xdf, 0xbe, 0x7d, 0xb3, 0x70, 0xa1, 0xa9, 0xa4, 0xdc, 0x10, 0xaf, 0x75, 0x65, 0x2b, 0x3c, 0xf7,
	0x1f, 0x76, 0x23, 0xab, 0x4a, 0x96, 0x34, 0xf3, 0xd3, 0xc6, 0x6d, 0x67, 0xb9, 0xda, 0x07, 0x82,
	0xdd, 0x1e, 0x5b, 0xf4, 0x51, 0xdb, 0xd6, 0x1c, 0xd5, 0xa5, 0x93, 0x3b, 0x15, 0xa6, 0xfb, 0xaf,
	0x04, 0xfa, 0x22, 0xc4, 0xe3, 0x04, 0x3a, 0x4e, 0x97, 0x69, 0x32, 0x4d, 0xb2, 0x81, 0x68, 0x7e,
	0xd9, 0x13, 0x74, 0x97, 0x5a, 0x1a, 0xcc, 0xa0, 0x9b, 0x6b, 0x69, 0xd2, 0x64, 0xda, 0xc9, 0x86,
	0xf3, 0x2b, 0x1e, 0xf2, 0x79, 0x9b, 0xcf, 0x97, 0x6a, 0x2f, 0x3c, 0xc1, 0xde, 0xa1, 0x2b, 0xc8,
	0xd4, 0xf8, 0x00, 0x3d, 0x4d, 0xc6, 0x95, 0xd6, 0xc7, 0x9d, 0x3a, 0x13, 0x19, 0xcc, 0xa0, 0x1f,
	0x77, 0x4c, 0xcf, 0x3c, 0x3e, 0x0e, 0x1c, 0x8f, 0xd5, 0x44, 0x6b, 0xcf, 0xbf, 0x13, 0x18, 0x47,
	0xf1, 0x2d, 0x57, 0xb9, 0x24, 0x8d, 0xcf, 0x30, 0x5a, 0x55, 0x6a, 0xbb, 0x93, 0x6b, 0xab, 0x5d,
	0x61, 0xf1, 0xfa, 0xdf, 0x55, 0x2f, 0xcd, 0xfa, 0x2c, 0x8d, 0x99, 0x01, 0xe6, 0x81, 0xf6, 0x65,
	0x57, 0x30, 0x08, 0xa2, 0xd3, 0x84, 0x77, 0x87, 0xd8, 0xaf, 0x21, 0xe8, 0xd3, 0x91, 0xb1, 0xec,
	0x44, 0x3c, 0x3e, 0xc2, 0x30, 0x16, 0x5b, 0xd7, 0x54, 0xe0, 0x28, 0xc6, 0x84, 0xbb, 0x27, 0x71,
	0x7a, 0x75, 0xaa, 0x68, 0xec, 0x39, 0x2e, 0xfe, 0xde, 0xfd, 0xf2, 0x70, 0x59, 0xde, 0x3c, 0x39,
	0x3b, 0x16, 0x9b, 0xa2, 0x9b, 0x9e, 0xd7, 0x16, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xde,
	0xb6, 0x01, 0x12, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReleaseManagerClient is the client API for ReleaseManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReleaseManagerClient interface {
	ConfigStruct(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ReleaseSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FuncSpec2, error)
	Release(ctx context.Context, in *Release_Args, opts ...grpc.CallOption) (*Release_Resp, error)
}

type releaseManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewReleaseManagerClient(cc grpc.ClientConnInterface) ReleaseManagerClient {
	return &releaseManagerClient{cc}
}

func (c *releaseManagerClient) ConfigStruct(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/proto.ReleaseManager/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.ReleaseManager/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) ReleaseSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FuncSpec2, error) {
	out := new(FuncSpec2)
	err := c.cc.Invoke(ctx, "/proto.ReleaseManager/ReleaseSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) Release(ctx context.Context, in *Release_Args, opts ...grpc.CallOption) (*Release_Resp, error) {
	out := new(Release_Resp)
	err := c.cc.Invoke(ctx, "/proto.ReleaseManager/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseManagerServer is the server API for ReleaseManager service.
type ReleaseManagerServer interface {
	ConfigStruct(context.Context, *empty.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*empty.Empty, error)
	ReleaseSpec(context.Context, *Empty) (*FuncSpec2, error)
	Release(context.Context, *Release_Args) (*Release_Resp, error)
}

// UnimplementedReleaseManagerServer can be embedded to have forward compatible implementations.
type UnimplementedReleaseManagerServer struct {
}

func (*UnimplementedReleaseManagerServer) ConfigStruct(ctx context.Context, req *empty.Empty) (*Config_StructResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigStruct not implemented")
}
func (*UnimplementedReleaseManagerServer) Configure(ctx context.Context, req *Config_ConfigureRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedReleaseManagerServer) ReleaseSpec(ctx context.Context, req *Empty) (*FuncSpec2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSpec not implemented")
}
func (*UnimplementedReleaseManagerServer) Release(ctx context.Context, req *Release_Args) (*Release_Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}

func RegisterReleaseManagerServer(s *grpc.Server, srv ReleaseManagerServer) {
	s.RegisterService(&_ReleaseManager_serviceDesc, srv)
}

func _ReleaseManager_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReleaseManager/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).ConfigStruct(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReleaseManager/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_ReleaseSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).ReleaseSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReleaseManager/ReleaseSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).ReleaseSpec(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Release_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReleaseManager/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).Release(ctx, req.(*Release_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReleaseManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ReleaseManager",
	HandlerType: (*ReleaseManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigStruct",
			Handler:    _ReleaseManager_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _ReleaseManager_Configure_Handler,
		},
		{
			MethodName: "ReleaseSpec",
			Handler:    _ReleaseManager_ReleaseSpec_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _ReleaseManager_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "release.proto",
}
