// Package datagen Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../data/k8s-install/app.yaml
package datagen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _k8sInstallAppYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xdb\x6a\xdc\x40\x0c\x7d\xf7\x57\x88\xbc\x4f\x76\xb7\xd0\x96\x0e\xe4\xa1\x17\x28\x85\x24\x35\x09\xa4\xcf\xda\xb1\xba\x19\x32\xb7\xce\xc8\x0e\x26\xe4\xdf\xcb\x78\x6d\x67\xbc\x97\x56\x0b\x8b\x47\x47\x3a\xe8\x88\x23\x21\x44\x85\x41\x3f\x50\x4c\xda\x3b\x09\xdd\xa6\x7a\xd2\xae\x91\x70\x4f\xb1\xd3\x8a\x2a\x4b\x8c\x0d\x32\xca\x0a\xc0\xa1\x25\x09\x2f\x2f\x70\x39\xa2\xb7\x68\x09\x5e\x5f\x47\x28\x05\x54\x23\x7e\x3b\x3d\x33\x9a\x02\xa9\xdc\x1e\x7c\xe4\x94\x3f\xc4\xf0\x29\xe1\xd3\xc7\xf5\xa6\x02\x98\x88\x77\x31\xa8\x0a\x20\x91\x21\xc5\x3e\xca\x01\xc2\x10\x24\x34\xd4\xfd\x36\xfe\x59\x24\x8a\x1d\xc5\x0a\x80\xfb\x40\x12\xae\x3d\x36\x5f\xd0\xa0\x53\x14\xab\x43\x25\x18\x42\x5a\xcd\x72\xbe\x51\x30\xbe\xb7\xe4\xf8\x84\xa2\x23\xfa\x7f\xa9\x01\x30\xb8\x25\x93\xce\x8f\x37\xe9\x4d\x1c\x91\x69\xd7\xef\x2b\xf7\x23\xdf\x91\x8a\x84\x4c\x47\x3a\x2d\xb2\x7a\xbc\x2e\x98\xcf\x4a\x27\x1b\x0c\x32\x8d\x6d\x85\x98\x1c\x66\xc1\x70\x8e\x03\x60\x9a\x31\x87\xf2\x8e\x51\x3b\x8a\x73\x9f\x18\x17\x53\x34\xe4\xd0\x16\x77\x85\x01\x28\xfe\xc8\x89\xfd\x52\x8a\x8a\xba\x35\xa6\xf6\x46\xab\x5e\xc2\x67\xf3\x8c\x7d\x9a\x71\xe5\xad\x45\xd7\xbc\xcd\x27\xe0\x62\x35\x8e\x77\xf1\x36\x74\xdc\xa5\xb2\xe4\x60\x0c\x01\xa2\xeb\xba\xf2\xd9\x6c\xaf\x56\x79\x0b\xc3\xdf\x65\xb3\x2d\x31\xa3\x13\x93\x13\xd9\x5c\x57\xeb\xcb\xe1\x27\x67\xe3\xe5\x98\x6d\x39\xb5\xcc\xfb\xa8\x97\x2e\xdd\xc7\xc2\xab\xe3\xd2\x75\x47\x8e\x52\xaa\xa3\xdf\x92\x2c\x6a\x59\x85\x7b\xaf\x9e\x88\xcb\x24\x8c\xee\x5f\x50\x44\x4a\xbe\x8d\x8a\x52\x59\x19\xe9\x4f\x4b\x89\xd3\xb2\x5b\x85\x56\xc2\x66\xbd\xb6\x8b\xac\x25\xeb\x63\x2f\xe1\xdd\xfb\x0f\x37\x7a\x46\x3a\x6f\x5a\x4b\x37\xbe\x75\x4b\x89\xa3\xef\x91\xb1\x20\xb1\xb9\xac\x46\x7e\x94\xb0\x2a\xa0\x3d\xc7\x91\x37\x16\xcd\x21\x5f\x5d\xde\x33\x3f\x0c\xd5\x5f\x0d\x6a\x5b\x8e\xad\x72\xe2\xf6\xc4\xb5\x89\xd0\xa9\xa3\xdb\x9d\xcf\xb6\x3e\xc5\xfb\xdf\x0b\x1e\x38\x27\x87\xa3\x52\x94\xd2\x8d\x6f\x26\x09\x02\xee\x08\x9b\x5f\x51\x33\xfd\x74\x2a\x5f\xe2\xc1\xf2\x0f\xd7\x9e\xd8\xc7\xc1\xf8\x9b\xef\xba\xfa\x1b\x00\x00\xff\xff\xc8\x46\xf9\x85\x31\x05\x00\x00"

func k8sInstallAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sInstallAppYaml,
		"k8s-install/app.yaml",
	)
}

func k8sInstallAppYaml() (*asset, error) {
	bytes, err := k8sInstallAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-install/app.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"k8s-install/app.yaml": k8sInstallAppYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"k8s-install": &bintree{nil, map[string]*bintree{
		"app.yaml": &bintree{k8sInstallAppYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
