// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../data/k8s-install/app.yaml (1.494kB)

package datagen

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _k8sInstallAppYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6b\x1b\x31\x10\xbd\xef\xaf\x18\x4c\x8e\xdd\xc4\x2e\xb4\xa5\x82\x1c\xda\x1e\x4a\x20\x49\x4d\x5d\xda\x43\xe9\x61\xac\x9d\x38\x22\xfa\xaa\x34\xbb\xc5\x18\xff\xf7\xb2\xb2\xbc\xab\x75\x9c\xc8\x60\x2c\xbd\x99\x37\x33\x4f\x4f\xae\xeb\xba\x42\xaf\x7e\x52\x88\xca\x59\x01\xdd\xa2\x7a\x52\xb6\x11\xb0\xa2\xd0\x29\x49\x95\x21\xc6\x06\x19\x45\x05\x60\xd1\x90\x80\xdd\x0e\x2e\x33\x7a\x8f\x86\x60\xbf\xcf\x50\xf4\x28\x33\x7e\x7f\xdc\x1e\xd0\xdd\x0e\xd4\xc3\x90\xf5\xc9\x5a\xc7\xc8\xca\xd9\x08\x75\xc2\x71\x3c\x11\x29\xbc\x86\x80\x76\x43\x70\xf1\x44\xdb\x37\x70\xd1\xa1\x6e\x09\xc4\xf5\x59\x8a\xc4\x90\x6a\xf4\xd1\xb0\xdf\x0b\x98\xf5\x9b\x43\xd2\x7e\x3f\xcb\x8c\x64\x9b\x63\x37\xc3\x26\x7a\x92\x7d\x45\xef\x02\xa7\xd2\x75\xfa\x29\xe0\xe3\x87\xf9\x22\xd1\x1e\x66\xde\x04\x2f\x2b\x80\x48\x9a\x24\xbb\x20\x12\x84\xde\x0b\xf8\x87\x5b\xef\x94\xe5\x3a\x52\xe8\x28\x54\x00\xbc\xf5\x24\xe0\xd6\x61\xf3\x19\x35\x5a\x49\xa1\x3a\x55\x19\xbd\x8f\x57\xa3\xd4\x8c\x4c\x0f\xad\x5e\x11\x9f\x91\xfb\x79\x81\xd7\xb5\xd6\xb8\x26\x1d\x5f\xe9\xf0\x38\xf3\x74\x18\x83\x2c\x1f\x6f\x8b\xdc\x17\xe7\x8b\xe3\xdd\x9f\x1d\x9f\x8c\xd7\xc8\x94\x69\x8b\x79\xfa\xa5\x27\x15\x5e\xac\x01\x70\xec\x32\x5f\x6d\x6f\x9f\x1b\x83\x1b\x5a\xb6\x5a\xaf\x48\x06\xe2\xec\x9d\x7e\xa9\x29\x32\xf0\xd7\x85\x65\x4f\xb3\x87\xe4\x89\x37\xfa\x25\x9d\x65\x54\x96\xc2\x33\x9e\xa2\xbf\xa1\xec\xf8\x20\x28\xa4\x1a\x23\x51\xd1\xd8\xd2\x69\x25\xb7\x02\x6e\x1e\xee\x1d\x2f\x03\x45\xb2\x3c\x44\x49\x67\x0c\xda\x66\x54\xa5\x86\xd9\x51\x93\xd9\x28\x55\xd8\xc4\x32\xe4\xa4\x99\x1a\xea\xae\xeb\xca\x6d\xb3\xbe\xbe\xea\xb5\x4f\x5f\x97\xcd\xba\xc4\xb4\x8a\x4c\xb6\xee\x7d\x7d\x3d\xbf\x4c\x1f\x31\x78\xbe\x5f\xc3\x8b\x38\xa6\x0c\xaa\x2c\xa7\x0f\xe4\xb0\x26\xcf\x24\x5f\xb5\xea\xc8\x52\x8c\xcb\xe0\xd6\x24\x8a\x58\x96\x7e\xe5\xe4\x13\x71\x79\x08\xf9\xe1\x4d\x28\x02\x45\xd7\x06\x49\xb1\x8c\x0c\xf4\xb7\xa5\xc8\x71\x9a\x2d\x7d\x2b\x60\x31\x9f\x9b\xc9\xa9\x21\xe3\xc2\x56\xc0\xdb\x77\xef\xef\xd4\x80\x74\x4e\xb7\x86\xee\x5c\x6b\xa7\x23\x1e\x86\xe8\xd5\x2a\x48\x4c\x1f\xb6\x44\x7e\x14\x70\x95\xa1\x43\xfe\x17\x8d\xca\xfc\xc8\x6e\xcf\x7f\x1e\xa7\x76\x3f\x61\x2c\x4d\x8d\x52\x52\x8c\x77\xae\xa1\x28\xe0\x37\xcc\xbe\x13\x36\xbf\x82\x62\xfa\x66\x25\xcd\xe0\x4f\xf5\xa2\x04\xe7\x04\x88\xec\x42\x32\xe3\xe2\xab\xaa\xaa\xff\x01\x00\x00\xff\xff\x24\x59\xaa\xa2\xd6\x05\x00\x00"

func k8sInstallAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sInstallAppYaml,
		"k8s-install/app.yaml",
	)
}

func k8sInstallAppYaml() (*asset, error) {
	bytes, err := k8sInstallAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-install/app.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x18, 0x42, 0xcd, 0x81, 0x9a, 0xc0, 0x85, 0xc, 0xac, 0xbd, 0x39, 0xb2, 0x61, 0x59, 0x42, 0x66, 0x98, 0x95, 0x98, 0xac, 0x9f, 0x40, 0xba, 0xfd, 0xf5, 0x1b, 0xc, 0xe1, 0x49, 0x7, 0xf2, 0xf9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"k8s-install/app.yaml": k8sInstallAppYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"k8s-install": &bintree{nil, map[string]*bintree{
		"app.yaml": &bintree{k8sInstallAppYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
