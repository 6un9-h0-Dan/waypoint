// Package datagen Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../data/k8s-install/app.yaml
package datagen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _k8sInstallAppYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xdd\x6a\x1b\x3d\x10\xbd\xdf\xa7\x18\x4c\x2e\x3f\xc5\xf6\x07\x6d\xa9\x20\x17\x69\x0b\xa5\x90\xa4\x26\x81\xf4\x7a\xac\x9d\x38\x22\xfa\xab\xa4\xdd\xb0\x18\xbf\x7b\x91\xf6\x27\x5a\xdb\x69\x65\x30\xab\x39\x33\x47\x33\x87\x33\x8c\xb1\x0a\x9d\x7c\x24\x1f\xa4\x35\x1c\xda\x75\xf5\x22\x4d\xcd\xe1\x81\x7c\x2b\x05\x55\x9a\x22\xd6\x18\x91\x57\x00\x06\x35\x71\xd8\xef\xe1\x72\x40\xef\x50\x13\x1c\x0e\x03\x14\x1c\x8a\x01\xbf\x1b\xaf\x3d\xba\xdf\x83\x7c\x9a\xaa\xae\x8d\xb1\x11\xa3\xb4\x26\x00\xcb\x38\xbe\x45\x78\x4e\x67\xe0\xd1\xec\x08\x2e\x5e\xa8\xfb\x0f\x2e\x5a\x54\x0d\x01\xbf\x3a\x4b\x91\x19\xf2\x1b\x29\x1b\x0e\x07\x0e\x8b\x74\xe9\x8b\x0e\x87\xc5\xc0\x48\xa6\x1e\xbb\x99\x2e\xc1\x91\x48\x2f\x3a\xeb\x63\x7e\x9a\xe5\x4f\x0e\x9f\x3f\xad\xd6\x99\xb6\x9f\x79\xe7\x9d\xa8\x00\x02\x29\x12\xd1\x7a\x9e\x21\x74\x8e\x43\x4d\xed\x93\xb2\xaf\x2c\x90\x6f\xc9\x57\x00\xb1\x73\xc4\xe1\xc6\x62\xfd\x05\x15\x1a\x41\xbe\x3a\x16\x19\x9d\x0b\xcb\x49\xe9\x6f\xe4\x94\xed\x34\x99\x78\x46\xec\x13\xfa\xbf\x0b\xad\x70\x4b\x2a\xbc\xdf\xde\x38\x6f\x88\x1e\x23\xed\xba\x3e\xb3\x6f\xf9\x9e\x84\x27\x8c\x74\x32\xa7\xc6\x28\x9e\x6f\x0a\xe6\x77\x47\x27\xed\x14\x46\x1a\xca\x8a\x61\xd2\x51\x33\x86\xf7\x38\x00\xc6\x1e\xd3\x11\xd6\x44\x94\x86\xfc\x54\xc7\x06\x61\x8a\x82\x74\xa4\xc6\x5d\xe1\x4d\xf2\x3f\x52\x60\xf4\xc6\x94\xb1\x69\x94\xda\x58\x25\x45\xc7\xe1\x5a\xbd\x62\x17\x26\x5c\x58\xad\xd1\xd4\x6f\xfd\x31\x58\x2c\x87\xf6\x16\x6f\x4d\xfb\x5d\x28\x53\x8e\xda\x60\xc0\xda\xb6\x2d\xaf\xf5\xf6\x6a\x99\x54\xc8\x7f\x97\xf5\xb6\xc4\x94\x0c\x91\x0c\x4b\xe6\xba\x5a\x5d\xe6\x1f\x9f\x8c\x97\xce\x64\xcb\xb1\x64\xd2\x63\x33\x77\x69\x7f\x66\x5e\x1d\x44\x97\x2d\x19\x0a\x61\xe3\xed\x96\x78\x91\x1b\x85\x7b\xb0\xe2\x85\x62\x19\x84\xc1\xfd\x33\x0a\x4f\xc1\x36\x5e\x50\x28\x33\x3d\xfd\x6e\x28\xc4\x30\xaf\x16\xae\xe1\xb0\x5e\xad\xf4\x2c\xaa\x49\x5b\xdf\x71\xf8\xff\xc3\xc7\x5b\x39\x21\xad\x55\x8d\xa6\x5b\xdb\x98\xf9\x88\x83\xef\x31\x62\x41\xa2\x53\xda\x06\xe3\x33\x87\x65\x01\xf5\x1c\x27\xde\x98\x15\xbb\xb4\x75\x49\xe7\xf8\x98\xb3\xbf\x2a\x94\xba\x6c\x5b\xa4\xc0\xdd\x99\x6d\x63\xae\x15\x27\xbb\x3b\xad\xed\xe6\x1c\xef\x3f\x37\x38\x73\x8e\x0e\x47\x21\x28\x84\x5b\x5b\x8f\x23\x30\xb8\x27\xac\x7f\x79\x19\xe9\xa7\x11\x69\x13\x8f\xc4\x3f\x96\x3d\x44\xeb\xb3\xf1\xd7\xdf\x65\xf5\x27\x00\x00\xff\xff\xc4\xf1\xb8\x34\xcc\x05\x00\x00"

func k8sInstallAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sInstallAppYaml,
		"k8s-install/app.yaml",
	)
}

func k8sInstallAppYaml() (*asset, error) {
	bytes, err := k8sInstallAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-install/app.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"k8s-install/app.yaml": k8sInstallAppYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"k8s-install": &bintree{nil, map[string]*bintree{
		"app.yaml": &bintree{k8sInstallAppYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
