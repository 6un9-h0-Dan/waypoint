syntax = "proto3";

package hashicorp.devflow;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

// The service that is implemented for the server backend.
service Devflow {
  // CreateBuild starts an artifact build.
  rpc CreateBuild(CreateBuildRequest) returns (CreateBuildResponse);

  // CompleteBuild is called when a build is completed (for a local run).
  // This updates the final status of the build, including information about
  // the generated artifact.
  rpc CompleteBuild(CompleteBuildRequest) returns (google.protobuf.Empty);

  // ListBuilds returns the builds. This automatically returns the builds
  // in descending order based on start time.
  rpc ListBuilds(google.protobuf.Empty) returns (ListBuildsResponse);
}

/********************************************************************
* Shared Messages
********************************************************************/

// Component represents metadata about a component. A component is the
// generic name for a builder, registry, platform, etc.
message Component {
  // type of the component
  Type type = 1;

  // name of the component
  string name = 2;

  enum Type {
    UNKNOWN = 0;
    BUILDER = 1;
  }
}

// Status represents the status of an async operation.
message Status {
  // state is the state of this operation.
  State state = 1;

  // details may be non-empty to provide human-friendly information
  // about the current status. This may change between status updates
  // for the same state to provide updated details about the state.
  string details = 2;

  // error is set if the state == ERROR with the error that occurred.
  google.rpc.Status error = 3;

  // start_time is the time the operation was started.
  google.protobuf.Timestamp start_time = 4;

  // complete_time is the time the operation completed (success or fail).
  google.protobuf.Timestamp complete_time = 5;

  enum State {
    UNKNOWN = 0;
    RUNNING = 1;
    SUCCESS = 2;
    ERROR = 3;
  }
}

/********************************************************************
* Build
********************************************************************/

message CreateBuildRequest {
  // component type being used for the build
  Component component = 1;
}

message CreateBuildResponse {
  // id is the unique ID for this build.
  string id = 1;
}

message CompleteBuildRequest {
  // id is the unique ID of the build to complete.
  string id = 1;

  oneof result {
    // artifact is the artifact that was created for this build
    Artifact artifact = 2;

    // error is an error that occurred as part of the build
    google.rpc.Status error = 3;
  }
}

message ListBuildsResponse {
  // builds is the list of builds.
  repeated Build builds = 1;
}

// Build represents a process of creating an artifact that can be in any state,
// such as complete. A successful complete build produces an artifact.
message Build {
  // id is the unique ID of the build
  string id = 1;

  // status of the build
  Status status = 2;

  // component is the component that was used for this build
  Component component = 3;

  // artifact is the result of the build if the status.state == SUCCESS
  Artifact artifact = 4;
}

// Artifact is the result of a build or registry. This is the metadata only.
// The binary contents of an artifact are expected to be stored in a registry.
message Artifact {
  // artifact is the full artifact encoded directly from the component plugin.
  // The receiving end must have access to the component proto files to
  // know how to decode this.
  google.protobuf.Any artifact = 1;
}
