// Package datagen Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../data/k8s-install/app.yaml
package datagen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _k8sInstallAppYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4f\x6b\x1b\x3f\x10\xbd\xef\xa7\x18\x4c\x8e\x3f\x25\xf6\x0f\xda\x52\x41\x0e\x69\x0f\xa5\x90\xa4\xa6\x2e\xed\xa1\xf4\x30\xd6\x4e\x1c\x11\xfd\xab\xa4\xdd\x60\x8c\xbf\x7b\x91\x2c\xef\x6a\x1d\x27\x32\x18\x4b\x6f\xe6\xcd\xcc\xd3\x93\x19\x63\x0d\x3a\xf9\x93\x7c\x90\xd6\x70\xe8\x17\xcd\x93\x34\x2d\x87\x15\xf9\x5e\x0a\x6a\x34\x45\x6c\x31\x22\x6f\x00\x0c\x6a\xe2\xb0\xdb\xc1\x65\x41\xef\x51\x13\xec\xf7\x05\x0a\x0e\x45\xc1\xef\x8f\xdb\x03\xba\xdb\x81\x7c\x18\xb2\x6e\x8c\xb1\x11\xa3\xb4\x26\x00\xcb\x38\x8e\x27\x3c\x87\x33\xf0\x68\x36\x04\x17\x4f\xb4\xfd\x0f\x2e\x7a\x54\x1d\x01\xbf\x3e\x4b\x91\x19\x72\x8d\x14\x0d\xfb\x3d\x87\x59\xda\x1c\x92\xf6\xfb\x59\x61\x24\xd3\x1e\xbb\x19\x36\xc1\x91\x48\x15\x9d\xf5\x31\x97\x66\xf9\x27\x87\x8f\x1f\xe6\x8b\x4c\x7b\x98\x79\xe3\x9d\x68\x00\x02\x29\x12\xd1\x7a\x9e\x21\x74\x8e\xc3\x33\x6e\x9d\x95\x26\xb2\x40\xbe\x27\xdf\x00\xc4\xad\x23\x0e\xb7\x16\xdb\x4f\xa8\xd0\x08\xf2\xcd\xa9\xca\xe8\x5c\xb8\x1a\xa5\x8e\x18\xe9\xa1\x53\x2b\x8a\x67\xe4\x7e\x59\xe0\x6d\xad\x15\xae\x49\x85\x37\x3a\x3c\xce\x3c\x1d\x46\x63\x14\x8f\xb7\x55\xee\xab\xf3\x85\xf1\xee\xcf\x8e\x4f\xda\x29\x8c\x54\x68\xab\x79\xd2\x52\x93\x0a\xaf\xd6\x00\x38\x76\x59\xae\x36\xd9\xe7\xab\xc6\x0d\x2d\x3b\xa5\x56\x24\x3c\xc5\xe2\x9d\xb4\xe4\x14\x19\xf8\x59\x65\xd9\xd3\xec\x21\x79\xe2\x8d\xb4\x84\x35\x11\xa5\x21\xff\x82\xa7\xea\x6f\x28\x3b\x3e\x08\xf2\xb9\xc6\x48\x54\x35\xb6\xb4\x4a\x8a\x2d\x87\x1b\xf5\x8c\xdb\x30\xe0\xc2\x6a\x8d\xa6\x1d\xf5\x60\x30\x3b\xaa\x31\x1b\x45\xf2\x9b\x50\x87\x9c\xb4\xc1\x80\xf5\x7d\x5f\x6f\xdb\xf5\xf5\x55\x52\x3d\x7f\x5d\xb6\xeb\x1a\x53\x32\x44\x32\x2c\x39\xfa\x7a\x7e\x99\x3f\x7c\x70\x7b\x5a\xc3\x5b\x38\xa6\x0c\x7a\x2c\xa7\x4f\xe3\xb0\x26\x0f\xa4\x5c\xb2\xec\xc9\x50\x08\x4b\x6f\xd7\xc4\xab\xd8\x28\xdc\xca\x8a\x27\x8a\xf5\x21\x94\x27\x37\xa1\xf0\x14\x6c\xe7\x05\x85\x3a\xd2\xd3\xdf\x8e\x42\x0c\xd3\x6c\xe1\x3a\x0e\x8b\xf9\x5c\x4f\x4e\x35\x69\xeb\xb7\x1c\xfe\x7f\xf7\xfe\x4e\x0e\x48\x6f\x55\xa7\xe9\xce\x76\x66\x3a\xe2\x61\x88\xa4\x56\x45\xa2\x53\xd8\x12\xe3\x23\x87\xab\x02\x1d\xf2\x3f\x2b\x94\xfa\x47\xf1\x79\xf9\xdb\x38\x35\xfa\x09\x63\x6d\x67\x14\x82\x42\xb8\xb3\x2d\x05\x0e\xbf\x61\xf6\x9d\xb0\xfd\xe5\x65\xa4\x6f\x46\xd0\x0c\xfe\x34\xaf\x4a\x70\x4e\x80\x10\xad\xcf\x36\x5c\x7c\x91\x4d\xf3\x2f\x00\x00\xff\xff\x52\x09\x9d\x44\xd0\x05\x00\x00"

func k8sInstallAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sInstallAppYaml,
		"k8s-install/app.yaml",
	)
}

func k8sInstallAppYaml() (*asset, error) {
	bytes, err := k8sInstallAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-install/app.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"k8s-install/app.yaml": k8sInstallAppYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"k8s-install": &bintree{nil, map[string]*bintree{
		"app.yaml": &bintree{k8sInstallAppYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
