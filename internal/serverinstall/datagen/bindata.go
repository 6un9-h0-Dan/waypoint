// Package datagen Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../data/k8s-install/app.yaml
package datagen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _k8sInstallAppYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4f\x6b\x1b\x3f\x10\xbd\xef\xa7\x18\x4c\x8e\xbf\x4d\xec\x1f\xb4\xa5\x82\x1c\xda\x1e\x4a\x21\x49\x4d\x5d\xda\x43\xe9\x61\xac\x9d\x38\x22\xfa\x57\x49\xbb\xc5\x18\x7f\xf7\x22\xad\xbc\xab\xdd\xd8\x91\xc1\x58\x7a\x33\x6f\x66\x9e\x9e\x5c\xd7\x75\x85\x56\xfc\x20\xe7\x85\xd1\x0c\xba\x55\xf5\x2c\x74\xc3\x60\x43\xae\x13\x9c\x2a\x45\x01\x1b\x0c\xc8\x2a\x00\x8d\x8a\x18\x1c\x0e\x70\x9d\xd1\x07\x54\x04\xc7\x63\x86\xbc\x45\x9e\xf1\x87\xd3\xb6\x47\x0f\x07\x10\x8f\x43\xd6\x07\xad\x4d\xc0\x20\x8c\xf6\x50\x27\x1c\xc7\x13\x96\xc2\x6b\x70\xa8\x77\x04\x57\xcf\xb4\xff\x0f\xae\x3a\x94\x2d\x01\xbb\x3d\x4b\x91\x18\x52\x8d\x18\x0d\xc7\x23\x83\x45\xdc\xf4\x49\xc7\xe3\x22\x33\x92\x6e\x4e\xdd\x0c\x1b\x6f\x89\xc7\x8a\xd6\xb8\x90\x4a\xd7\xe9\x27\x83\xf7\xef\x96\xab\x44\xdb\xcf\xbc\x73\x96\x57\x00\x9e\x24\xf1\x60\x1c\x4b\x10\x5a\xcb\xe0\x2f\xee\xad\x11\x3a\xd4\x9e\x5c\x47\xae\x02\x08\x7b\x4b\x0c\xee\x0c\x36\x1f\x51\xa2\xe6\xe4\xaa\xb9\xca\x68\xad\xbf\x19\xa5\x0e\x18\xe8\xb1\x95\x1b\x0a\x67\xe4\x7e\x59\xe0\x75\xad\x25\x6e\x49\xfa\x57\x3a\x3c\xcd\x3c\x1d\x46\x61\xe0\x4f\x77\x45\xee\xc5\xf9\xfc\x78\xf7\x67\xc7\x27\x65\x25\x06\xca\xb4\xc5\x3c\x71\xc9\x49\x85\x8b\x35\x00\x4e\x5d\xe6\xab\x8d\xf6\xf9\xa2\x70\x47\xeb\x56\xca\x0d\x71\x47\x21\x7b\x27\x2e\x31\x45\x06\xfe\xba\xb0\xec\x3c\x7b\x48\x9e\x78\x23\x2e\x6e\x74\x40\xa1\xc9\xbd\xe0\x29\xfa\x1b\xca\x8e\x0f\x82\x5c\xaa\x31\x12\x15\x8d\xad\x8d\x14\x7c\x3f\xeb\xa4\x3f\x2c\xe3\xb9\x51\x0a\x75\x33\xea\x53\xc3\xe2\xa4\xce\x62\x14\xcd\xed\x7c\x19\x32\x6b\xab\x86\xba\xeb\xba\x72\xdb\x6c\x6f\x6f\xe2\x2d\xa4\xaf\xeb\x66\x5b\x62\x52\xf8\x40\xba\x8e\x0e\xbf\x5d\x5e\xa7\x0f\x1b\xdc\x1f\xd7\xf0\x36\x4e\x29\x83\x3e\xeb\xe9\x53\xe9\xd7\xe4\xc1\xe4\x4b\x17\x1d\x69\xf2\x7e\xed\xcc\x96\x58\x11\x1b\xb8\xdd\x18\xfe\x4c\xa1\x3c\x84\xfc\x04\x27\x14\x8e\xbc\x69\x1d\x27\x5f\x46\x3a\xfa\xd3\x92\x0f\x7e\x9a\xcd\x6d\xcb\x60\xb5\x5c\xaa\xc9\xa9\x22\x65\xdc\x9e\xc1\xff\x6f\xde\xde\x8b\x01\xe9\x8c\x6c\x15\xdd\x9b\x56\x4f\x47\xec\x87\x88\x6a\x15\x24\x2a\x86\xad\x31\x3c\x31\xb8\xc9\x50\x9f\xff\x49\xa2\x50\xdf\xb3\xef\xf3\xdf\xc8\xdc\xf8\x33\xc6\xd2\xde\xc8\x39\x79\x7f\x6f\x1a\xf2\x0c\x7e\xc1\xe2\x1b\x61\xf3\xd3\x89\x40\x5f\x35\xa7\x05\xfc\xae\x2e\x4a\x70\x4e\x00\x1f\x8c\x4b\xb6\x5c\x7d\x16\x55\xf5\x2f\x00\x00\xff\xff\x4e\x86\x4b\xc4\xe0\x05\x00\x00"

func k8sInstallAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sInstallAppYaml,
		"k8s-install/app.yaml",
	)
}

func k8sInstallAppYaml() (*asset, error) {
	bytes, err := k8sInstallAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-install/app.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"k8s-install/app.yaml": k8sInstallAppYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"k8s-install": &bintree{nil, map[string]*bintree{
		"app.yaml": &bintree{k8sInstallAppYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
