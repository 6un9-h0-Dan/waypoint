// Code generated by go-bindata.
// sources:
// bindata.go
// ../data/k8s-install/app.yaml
// DO NOT EDIT!

package datagen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genBindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func genBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_genBindataGo,
		"gen/bindata.go",
	)
}

func genBindataGo() (*asset, error) {
	bytes, err := genBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1600223082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8sInstallAppYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4b\x6b\x1b\x3b\x14\xde\xcf\xaf\x38\x98\x2c\xef\x24\xb6\xe1\xde\xcb\x15\x64\x71\xdb\x45\x28\x24\xa9\xa9\x4b\xbb\x28\x5d\x1c\x6b\x4e\x1c\x11\xbd\x2a\x69\xa6\x18\xe3\xff\x5e\x34\x23\xcf\x48\x7e\x44\x06\x63\xe9\x3b\xe7\x3b\xcf\xcf\x75\x5d\x57\x68\xc5\x37\x72\x5e\x18\xcd\xa0\x5b\x54\x6f\x42\x37\x0c\xd6\xe4\x3a\xc1\xa9\x52\x14\xb0\xc1\x80\xac\x02\xd0\xa8\x88\xc1\x7e\x0f\xb7\x09\x7d\x46\x45\x70\x38\x24\xc8\x5b\xe4\x09\x7f\x3e\x5e\x07\x74\xbf\x07\xf1\x32\x7a\xfd\xaf\xb5\x09\x18\x84\xd1\x1e\xea\x1e\xc7\xe9\x85\xf5\xe6\x35\x38\xd4\x5b\x82\x9b\x37\xda\xfd\x05\x37\x1d\xca\x96\x80\xdd\x5f\xa4\xe8\x19\xfa\x18\xd1\x1a\x0e\x07\x06\xb3\x78\x19\x9c\x0e\x87\x59\x62\x24\xdd\x1c\xb3\x19\x2f\xde\x12\x8f\x11\xad\x71\xa1\x0f\x5d\xf7\x3f\x19\xfc\xf7\xef\x7c\xd1\xd3\x0e\x35\x6f\x9d\xe5\x25\xba\xcc\xd0\xd7\x10\x6c\x05\xe0\x49\x12\x0f\xc6\xb1\x1e\x42\x6b\x19\xfc\xc6\x9d\x35\x42\x87\xda\x93\xeb\xc8\x55\x00\x61\x67\x89\xc1\xa3\xc1\xe6\x03\x4a\xd4\x9c\x5c\x75\x3a\x03\xb4\xd6\xdf\x4d\x83\x08\x18\xe8\xa5\x95\x6b\x0a\x17\x86\x71\x1e\xe0\xfd\x49\x48\xdc\x90\xf4\xef\x64\x78\xec\x48\x59\x8c\xc2\xc0\x5f\x1f\x33\xdf\xab\xf5\xf9\x69\x33\x2e\x96\x4f\xca\x4a\x0c\x94\x68\xb3\x7a\xe2\x91\x45\x84\xab\x31\x00\x8e\x59\xa6\xc1\xc7\xe5\xfa\xa4\x70\x4b\xab\x56\xca\x35\x71\x47\x21\x6d\x56\x3c\xa2\x44\x46\xfe\x3a\x5b\xe8\x53\xef\xd1\xb9\xd8\x9c\x78\xb8\xd1\x01\x85\x26\x77\xc6\x93\xe5\x37\x86\x9d\xe4\x42\xae\x8f\x31\x11\x65\x89\xad\x8c\x14\x7c\x77\x92\xc9\xf0\x98\xdb\x73\xa3\x14\xea\x66\xea\x4f\x0d\xb3\x63\x77\x66\x53\xd3\xdc\xd6\xe7\x26\x27\x69\xd5\x50\x77\x5d\x97\x5f\x9b\xcd\xfd\x5d\x9c\x42\xff\x75\xdb\x6c\x72\x4c\x0a\x1f\x48\xd7\x71\xff\xef\xe7\xb7\xfd\x87\x8d\xda\x28\x6d\xa2\x0a\x72\x9b\xe5\x68\x33\xaa\xeb\xe8\x32\xf6\x70\x55\x8a\x6d\x38\x85\xe4\xae\xbb\x2c\xcf\x5c\x92\x0e\xd3\x2e\x89\x8e\x34\x79\xbf\x72\x66\x43\x2c\xb3\x0d\xdc\xae\x0d\x7f\xa3\x90\x3f\x42\x52\x76\x11\xf5\x2a\x45\x0c\xf4\x70\x46\x80\xe1\x95\xc1\xdd\x05\xd2\x22\x2f\x47\xde\xb4\x8e\x93\xcf\xbd\x1d\xfd\x6a\xc9\x07\x5f\x32\x72\xdb\x32\x58\xcc\xe7\xaa\x78\x55\xa4\x8c\xdb\x31\x58\xfe\xfd\xcf\x93\x18\x91\xce\xc8\x56\xd1\x93\x69\x75\xd9\xea\xa1\x33\x71\xb2\x19\x89\x8a\x66\xab\x21\xdf\x04\x0d\xfe\x1f\x25\x0a\xf5\x35\x69\x34\xfd\x21\x9e\x8a\xf4\x84\x31\x97\x22\x72\x4e\xde\x3f\x99\x86\x3c\x83\x1f\x30\xfb\x42\xd8\x7c\x77\x22\xd0\x67\xcd\x69\x06\x3f\xab\xab\x2d\xb8\xd4\x00\x1f\x8c\xeb\x25\xb4\x78\x10\xd5\x9f\x00\x00\x00\xff\xff\xa5\x3a\x5a\x22\xa9\x06\x00\x00")

func k8sInstallAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sInstallAppYaml,
		"k8s-install/app.yaml",
	)
}

func k8sInstallAppYaml() (*asset, error) {
	bytes, err := k8sInstallAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-install/app.yaml", size: 1705, mode: os.FileMode(420), modTime: time.Unix(1600222452, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen/bindata.go":       genBindataGo,
	"k8s-install/app.yaml": k8sInstallAppYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"gen": &bintree{nil, map[string]*bintree{
		"bindata.go": &bintree{genBindataGo, map[string]*bintree{}},
	}},
	"k8s-install": &bintree{nil, map[string]*bintree{
		"app.yaml": &bintree{k8sInstallAppYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
