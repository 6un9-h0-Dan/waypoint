// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Push struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Push) Reset()         { *m = Push{} }
func (m *Push) String() string { return proto.CompactTextString(m) }
func (*Push) ProtoMessage()    {}
func (*Push) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_e74e9ddd27d07cf5, []int{0}
}
func (m *Push) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Push.Unmarshal(m, b)
}
func (m *Push) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Push.Marshal(b, m, deterministic)
}
func (dst *Push) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Push.Merge(dst, src)
}
func (m *Push) XXX_Size() int {
	return xxx_messageInfo_Push.Size(m)
}
func (m *Push) XXX_DiscardUnknown() {
	xxx_messageInfo_Push.DiscardUnknown(m)
}

var xxx_messageInfo_Push proto.InternalMessageInfo

type Push_Resp struct {
	// result is the resulting opaque data type
	Result               *any.Any `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Push_Resp) Reset()         { *m = Push_Resp{} }
func (m *Push_Resp) String() string { return proto.CompactTextString(m) }
func (*Push_Resp) ProtoMessage()    {}
func (*Push_Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_registry_e74e9ddd27d07cf5, []int{0, 0}
}
func (m *Push_Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Push_Resp.Unmarshal(m, b)
}
func (m *Push_Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Push_Resp.Marshal(b, m, deterministic)
}
func (dst *Push_Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Push_Resp.Merge(dst, src)
}
func (m *Push_Resp) XXX_Size() int {
	return xxx_messageInfo_Push_Resp.Size(m)
}
func (m *Push_Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Push_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Push_Resp proto.InternalMessageInfo

func (m *Push_Resp) GetResult() *any.Any {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Push)(nil), "proto.Push")
	proto.RegisterType((*Push_Resp)(nil), "proto.Push.Resp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	ConfigStruct(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PushSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Push(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Push_Resp, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) ConfigStruct(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/proto.Registry/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Registry/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) PushSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/proto.Registry/PushSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Push(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Push_Resp, error) {
	out := new(Push_Resp)
	err := c.cc.Invoke(ctx, "/proto.Registry/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	ConfigStruct(context.Context, *empty.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*empty.Empty, error)
	PushSpec(context.Context, *Empty) (*FuncSpec, error)
	Push(context.Context, *FuncSpec_Args) (*Push_Resp, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ConfigStruct(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_PushSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).PushSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/PushSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).PushSpec(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Registry/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Push(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigStruct",
			Handler:    _Registry_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Registry_Configure_Handler,
		},
		{
			MethodName: "PushSpec",
			Handler:    _Registry_PushSpec_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Registry_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

func init() { proto.RegisterFile("registry.proto", fileDescriptor_registry_e74e9ddd27d07cf5) }

var fileDescriptor_registry_e74e9ddd27d07cf5 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x59, 0xa8, 0xa5, 0xc6, 0x45, 0x25, 0x14, 0xa9, 0x11, 0x44, 0x3c, 0x29, 0xc8, 0x14,
	0xaa, 0x47, 0x0f, 0x96, 0xa2, 0x67, 0xd9, 0xfe, 0x02, 0xbb, 0x4c, 0xe3, 0xc2, 0x9a, 0xc4, 0x24,
	0x73, 0xe8, 0x7f, 0xf6, 0x47, 0x48, 0x32, 0xa9, 0xe0, 0x8a, 0xa7, 0x30, 0xef, 0x7d, 0x79, 0xf3,
	0x46, 0x1c, 0x7b, 0xd4, 0x5d, 0x88, 0x7e, 0x07, 0xce, 0xdb, 0x68, 0xe5, 0x41, 0x7e, 0xd4, 0xb9,
	0xb6, 0x56, 0xf7, 0x38, 0xcf, 0xd3, 0x86, 0xb6, 0xf3, 0x37, 0x53, 0x08, 0x75, 0x31, 0xb4, 0xf0,
	0xc3, 0xc5, 0xbd, 0x59, 0xbb, 0x9e, 0x74, 0x67, 0x78, 0xba, 0x7e, 0x14, 0xa3, 0x57, 0x0a, 0xef,
	0xea, 0x41, 0x8c, 0x1a, 0x0c, 0x4e, 0xde, 0x89, 0xb1, 0xc7, 0x40, 0x7d, 0x9c, 0x55, 0x57, 0xd5,
	0xcd, 0xd1, 0x62, 0x0a, 0x9c, 0x05, 0xfb, 0x2c, 0x58, 0x9a, 0x5d, 0x53, 0x98, 0xc5, 0x57, 0x25,
	0x26, 0x4d, 0x69, 0x27, 0x9f, 0x44, 0xbd, 0xb2, 0x66, 0xdb, 0xe9, 0x75, 0xf4, 0xd4, 0x46, 0x79,
	0xf6, 0xe7, 0xeb, 0x73, 0xaa, 0xa1, 0x66, 0x2c, 0x00, 0xc3, 0xc0, 0x74, 0x5e, 0xbe, 0x12, 0x87,
	0x2c, 0x92, 0x47, 0x79, 0xf9, 0x1b, 0xfb, 0x31, 0x1a, 0xfc, 0x24, 0x0c, 0x51, 0xfd, 0x13, 0x2f,
	0x6f, 0xc5, 0x24, 0x5d, 0xb4, 0x76, 0xd8, 0xca, 0xba, 0x64, 0xf0, 0xe2, 0x93, 0x32, 0xbd, 0x90,
	0x69, 0xb3, 0x0d, 0x7c, 0xbc, 0x9c, 0x0e, 0x0c, 0x58, 0x7a, 0x1d, 0xd4, 0x69, 0x51, 0x13, 0x02,
	0xa9, 0xdf, 0x66, 0x9c, 0x85, 0xfb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xf0, 0x2c, 0x5b,
	0x92, 0x01, 0x00, 0x00,
}
