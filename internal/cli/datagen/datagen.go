// Package datagen Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/init.tpl.hcl
package datagen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initTplHcl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x3d\x6f\xdc\x3c\x10\x84\x7b\xfd\x8a\x81\xae\x70\xe3\x57\x2f\xdc\x06\x70\xe1\xc4\x8d\x81\x74\xf9\xaa\xf7\xa8\xbd\x13\x63\x92\xcb\xf0\x23\x17\xc5\xb8\xff\x1e\x2c\x79\x56\x2e\x56\x23\x89\x8b\x79\x76\x66\xb8\xc3\xe7\x85\x11\xc8\x33\xe4\x80\x55\x6a\x42\x4c\xf2\x9d\x4d\x99\xf0\xf0\xfa\x89\xb2\x46\x6b\xc8\xb9\x15\x9e\x62\xc6\xdd\xbb\x3b\x14\x01\xe1\xeb\x87\x4f\x48\x1c\x25\xdb\x22\x69\x9d\x06\xa5\xd9\xdc\x71\xbe\xe6\x82\x3d\xa3\x06\xfb\xa3\x32\x0e\x92\x3a\xfe\x1b\xad\x51\x6c\x28\xc8\x9c\x7e\x72\x9a\xf0\xd4\xf6\xde\x24\x46\xaa\x21\xd8\x70\x84\x0d\xc3\x0e\x4e\x0c\x39\x78\x99\xf9\x16\x45\xa9\x6f\x80\x45\x3a\xcf\x93\x59\x6c\xe0\x69\x78\x35\x7b\x8f\xd1\xaf\xff\x5d\xfe\xc6\x61\xd8\xe1\x23\xed\xd9\x65\x18\x0a\xaa\xcf\x91\x8d\x3d\x58\x9e\x9b\x27\x49\x47\x0a\xf6\x37\x15\x2b\x81\x1c\x62\x4d\x51\x32\x67\xcd\xe2\xba\xec\x1e\x2f\x18\x0f\x22\xa3\x92\xf7\x94\x46\x9c\x15\xfa\x10\x40\x31\x3a\x6b\x9a\x54\xed\xcc\x1c\x9d\xac\xd3\x40\x31\x62\x3c\xf1\x7e\xc4\xcb\x00\x00\x3b\xbc\xaf\xd6\xcd\xdb\xe2\x8c\x45\x4e\xa0\x7f\xf5\x79\x91\xea\x66\xf5\xd7\x31\x3c\x4f\x78\x0a\x3d\xb9\xa1\xcc\xb7\x17\xd4\x89\x6f\x9c\xc3\xbe\x01\x6b\xd6\xb6\x08\x8f\x62\x9e\x39\x1d\xac\x63\x50\x98\xf1\xcc\x1c\x5b\x8d\x05\x36\x80\x2e\x4d\x26\x3e\xda\x5c\xf4\x96\x14\xd4\x01\xe3\xdc\x94\x6a\xb4\x9d\xf6\x15\x5f\x82\x11\xef\x39\x68\xdb\x4e\x4e\x1a\xad\x66\x06\x21\xb1\x97\xc2\xe8\xa2\x0d\xa8\xf3\x58\xf3\xd2\xaf\x43\xc1\x05\xd6\xd3\x51\x4b\xdc\xa0\x57\xf8\x4d\x77\xb5\xfd\xef\x54\x9f\xa6\xd6\xb6\x37\xcf\xfc\x8b\x7c\x74\x3c\x19\xf1\xff\xb7\xe9\xf8\x46\x52\xe8\x08\xa8\xc4\x51\xe1\x5c\xae\xc7\xe7\x9e\xed\xf2\xda\xe1\xb1\xf5\xab\xae\x7b\x6f\xed\xb8\x97\x7e\x65\xe9\x3c\x9c\x87\x3f\x01\x00\x00\xff\xff\x7c\xa2\x4a\x05\x1d\x03\x00\x00"

func initTplHclBytes() ([]byte, error) {
	return bindataRead(
		_initTplHcl,
		"init.tpl.hcl",
	)
}

func initTplHcl() (*asset, error) {
	bytes, err := initTplHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init.tpl.hcl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init.tpl.hcl": initTplHcl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"init.tpl.hcl": &bintree{initTplHcl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
