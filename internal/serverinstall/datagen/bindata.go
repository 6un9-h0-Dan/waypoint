// Package datagen Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../data/k8s-install/app.yaml
package datagen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _k8sInstallAppYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6b\x1b\x3d\x10\xbe\xef\xaf\x18\x4c\x8e\xef\x26\xb6\xe1\x6d\xa9\x20\x87\xb6\x87\xb4\x90\xa4\xa6\x0e\xed\xa1\xf4\x30\xd6\x4e\x6c\x61\x7d\x55\xd2\x6e\x31\xc6\xff\xbd\x68\x77\xbd\x2b\xf9\x23\x32\x18\x4b\xcf\xcc\x33\x9f\x8f\xcb\xb2\x2c\xd0\x8a\x1f\xe4\xbc\x30\x9a\x41\x33\x2b\xb6\x42\x57\x0c\x96\xe4\x1a\xc1\xa9\x50\x14\xb0\xc2\x80\xac\x00\xd0\xa8\x88\xc1\x7e\x0f\xb7\x3d\xfa\x8c\x8a\xe0\x70\xe8\x21\x6f\x91\xf7\xf8\xf3\xf1\xda\xa1\xfb\x3d\x88\xd7\xc1\xeb\xa3\xd6\x26\x60\x10\x46\x7b\x28\x5b\x1c\xc7\x17\xd6\x9a\x97\xe0\x50\xaf\x09\x6e\xb6\xb4\xfb\x0f\x6e\x1a\x94\x35\x01\xbb\xbf\x48\xd1\x32\xb4\x31\xa2\x35\x1c\x0e\x0c\x26\xf1\xd2\x39\x1d\x0e\x93\x9e\x91\x74\x75\xcc\x66\xb8\x78\x4b\x3c\x46\xb4\xc6\x85\x36\x74\xd9\xfe\x64\xf0\xe1\xfd\x74\xd6\xd2\x76\x35\xaf\x9d\xe5\x39\x3a\x4f\xd0\x4d\x08\xb6\x00\xf0\x24\x89\x07\xe3\x58\x0b\xa1\xb5\x0c\xfe\xe2\xce\x1a\xa1\x43\xe9\xc9\x35\xe4\x0a\x80\xb0\xb3\xc4\xe0\xd1\x60\xf5\x09\x25\x6a\x4e\xae\x38\x9d\x01\x5a\xeb\xef\xc6\x41\x04\x0c\xf4\x5a\xcb\x25\x85\x0b\xc3\x38\x0f\xf0\xf6\x24\x24\xae\x48\xfa\x37\x32\x3c\x76\x24\x2f\x46\x61\xe0\x9b\xc7\xc4\xf7\x6a\x7d\x7e\xdc\x8c\x8b\xe5\x93\xb2\x12\x03\xf5\xb4\x49\x3d\xf1\xc8\x2c\xc2\xd5\x18\x00\xc7\x2c\xfb\xc1\xc7\xe5\xfa\xaa\x70\x4d\x8b\x5a\xca\x25\x71\x47\xa1\xdf\xac\x78\x44\x8e\x0c\xfc\x65\xb2\xd0\xa7\xde\x83\x73\xb6\x39\xf1\x70\xa3\x03\x0a\x4d\xee\x8c\x27\xc9\x6f\x08\x3b\xca\x85\x5c\x1b\x63\x24\x4a\x12\x5b\x18\x29\xf8\xee\x24\x93\xee\x31\xb5\xe7\x46\x29\xd4\xd5\xd8\x9f\x12\x26\xc7\xee\x4c\xc6\xa6\xb9\xb5\x4f\x4d\x4e\xd2\x2a\xc1\xd5\x3a\xb9\x95\x4d\xd3\xa4\xd7\x6a\x75\x7f\x17\x67\xd2\x7e\xdd\x56\xab\x14\x93\xc2\x07\xd2\x65\x54\xc3\xfd\xf4\xb6\xfd\xb0\x41\x29\xb9\x4d\xd4\x44\x6a\x33\x1f\x6c\x06\xad\x1d\x5d\x86\x8e\x2e\x72\xe9\x75\x27\x13\xe0\x75\x97\xf9\x99\x4b\xaf\xca\x7e\xb3\x44\x43\x9a\xbc\x5f\x38\xb3\x22\x96\xd8\x06\x6e\x97\x86\x6f\x29\xa4\x8f\xd0\xeb\x3c\x8b\x7a\x95\x22\x06\x7a\x38\x23\xc0\xb0\x61\x70\x77\x81\x34\xcb\x2b\x1e\xcf\x37\x14\x13\xfe\xf2\xf2\xb2\x58\x0e\x88\x23\x6f\x6a\xc7\xc9\xa7\xbc\x8e\xfe\xd4\xe4\x83\xcf\x63\x71\x5b\x33\x98\x4d\xa7\x2a\x7b\x55\xa4\x8c\xdb\x31\x98\xff\xff\xee\x49\x0c\x48\x63\x64\xad\xe8\xc9\xd4\x3a\x1f\x42\xd7\xb3\x38\xf3\x84\x44\x45\xb3\x45\x57\x49\x0f\x75\xfe\x9f\x25\x0a\xf5\xd2\x6b\xb9\xff\xe3\x3c\x15\xf3\x09\x63\x2a\x59\xe4\x9c\xbc\x7f\x32\x15\x79\x06\xbf\x60\xf2\x9d\xb0\xfa\xe9\x44\xa0\x6f\x9a\xd3\x04\x7e\x17\x57\x5b\x70\xa9\x01\x3e\x18\xd7\x4a\x6d\xf6\x20\x8a\x7f\x01\x00\x00\xff\xff\x4e\xc6\xe4\xc1\xd1\x06\x00\x00"

func k8sInstallAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sInstallAppYaml,
		"k8s-install/app.yaml",
	)
}

func k8sInstallAppYaml() (*asset, error) {
	bytes, err := k8sInstallAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-install/app.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"k8s-install/app.yaml": k8sInstallAppYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"k8s-install": &bintree{nil, map[string]*bintree{
		"app.yaml": &bintree{k8sInstallAppYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
