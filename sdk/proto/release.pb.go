// Code generated by protoc-gen-go. DO NOT EDIT.
// source: release.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Release struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Release) Reset()         { *m = Release{} }
func (m *Release) String() string { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()    {}
func (*Release) Descriptor() ([]byte, []int) {
	return fileDescriptor_release_1eadb03f51b34e54, []int{0}
}
func (m *Release) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release.Unmarshal(m, b)
}
func (m *Release) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release.Marshal(b, m, deterministic)
}
func (dst *Release) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release.Merge(dst, src)
}
func (m *Release) XXX_Size() int {
	return xxx_messageInfo_Release.Size(m)
}
func (m *Release) XXX_DiscardUnknown() {
	xxx_messageInfo_Release.DiscardUnknown(m)
}

var xxx_messageInfo_Release proto.InternalMessageInfo

func (m *Release) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Release_Args struct {
	// args is the list of argument types. This will include some of the
	// standard types in this file (in the Args message namespace) as well
	// as custom types declared by the FuncSpec that the plugin is expected
	// to understand how to decode.
	Args                 []*any.Any `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Release_Args) Reset()         { *m = Release_Args{} }
func (m *Release_Args) String() string { return proto.CompactTextString(m) }
func (*Release_Args) ProtoMessage()    {}
func (*Release_Args) Descriptor() ([]byte, []int) {
	return fileDescriptor_release_1eadb03f51b34e54, []int{0, 0}
}
func (m *Release_Args) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release_Args.Unmarshal(m, b)
}
func (m *Release_Args) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release_Args.Marshal(b, m, deterministic)
}
func (dst *Release_Args) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release_Args.Merge(dst, src)
}
func (m *Release_Args) XXX_Size() int {
	return xxx_messageInfo_Release_Args.Size(m)
}
func (m *Release_Args) XXX_DiscardUnknown() {
	xxx_messageInfo_Release_Args.DiscardUnknown(m)
}

var xxx_messageInfo_Release_Args proto.InternalMessageInfo

func (m *Release_Args) GetArgs() []*any.Any {
	if m != nil {
		return m.Args
	}
	return nil
}

type Release_Resp struct {
	// result is the resulting data type for building.
	Result *any.Any `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// release structure
	Release              *Release `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Release_Resp) Reset()         { *m = Release_Resp{} }
func (m *Release_Resp) String() string { return proto.CompactTextString(m) }
func (*Release_Resp) ProtoMessage()    {}
func (*Release_Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_release_1eadb03f51b34e54, []int{0, 1}
}
func (m *Release_Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release_Resp.Unmarshal(m, b)
}
func (m *Release_Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release_Resp.Marshal(b, m, deterministic)
}
func (dst *Release_Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release_Resp.Merge(dst, src)
}
func (m *Release_Resp) XXX_Size() int {
	return xxx_messageInfo_Release_Resp.Size(m)
}
func (m *Release_Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Release_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Release_Resp proto.InternalMessageInfo

func (m *Release_Resp) GetResult() *any.Any {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Release_Resp) GetRelease() *Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func init() {
	proto.RegisterType((*Release)(nil), "proto.Release")
	proto.RegisterType((*Release_Args)(nil), "proto.Release.Args")
	proto.RegisterType((*Release_Resp)(nil), "proto.Release.Resp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReleaseManagerClient is the client API for ReleaseManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReleaseManagerClient interface {
	ConfigStruct(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ReleaseSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Release(ctx context.Context, in *Release_Args, opts ...grpc.CallOption) (*Release_Resp, error)
}

type releaseManagerClient struct {
	cc *grpc.ClientConn
}

func NewReleaseManagerClient(cc *grpc.ClientConn) ReleaseManagerClient {
	return &releaseManagerClient{cc}
}

func (c *releaseManagerClient) ConfigStruct(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/proto.ReleaseManager/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.ReleaseManager/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) ReleaseSpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/proto.ReleaseManager/ReleaseSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) Release(ctx context.Context, in *Release_Args, opts ...grpc.CallOption) (*Release_Resp, error) {
	out := new(Release_Resp)
	err := c.cc.Invoke(ctx, "/proto.ReleaseManager/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseManagerServer is the server API for ReleaseManager service.
type ReleaseManagerServer interface {
	ConfigStruct(context.Context, *empty.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*empty.Empty, error)
	ReleaseSpec(context.Context, *Empty) (*FuncSpec, error)
	Release(context.Context, *Release_Args) (*Release_Resp, error)
}

func RegisterReleaseManagerServer(s *grpc.Server, srv ReleaseManagerServer) {
	s.RegisterService(&_ReleaseManager_serviceDesc, srv)
}

func _ReleaseManager_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReleaseManager/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).ConfigStruct(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReleaseManager/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_ReleaseSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).ReleaseSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReleaseManager/ReleaseSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).ReleaseSpec(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Release_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReleaseManager/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).Release(ctx, req.(*Release_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReleaseManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ReleaseManager",
	HandlerType: (*ReleaseManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigStruct",
			Handler:    _ReleaseManager_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _ReleaseManager_Configure_Handler,
		},
		{
			MethodName: "ReleaseSpec",
			Handler:    _ReleaseManager_ReleaseSpec_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _ReleaseManager_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "release.proto",
}

func init() { proto.RegisterFile("release.proto", fileDescriptor_release_1eadb03f51b34e54) }

var fileDescriptor_release_1eadb03f51b34e54 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xa9, 0xab, 0x1b, 0x7b, 0x57, 0xa7, 0x44, 0x91, 0x1a, 0x41, 0x86, 0xa7, 0x1e, 0x46,
	0x26, 0xdb, 0x17, 0x70, 0x0c, 0xbd, 0x79, 0xc9, 0xee, 0x42, 0x57, 0xde, 0x85, 0x41, 0x4d, 0x63,
	0xfe, 0x1c, 0xf6, 0xa1, 0xfc, 0x82, 0x9e, 0xa4, 0x49, 0xaa, 0x6c, 0xb2, 0x53, 0xfb, 0x3e, 0xcf,
	0x2f, 0x4f, 0x9e, 0x37, 0x70, 0xa1, 0xb1, 0xc6, 0xd2, 0x20, 0x53, 0xba, 0xb1, 0x0d, 0x39, 0xf7,
	0x1f, 0x7a, 0x27, 0x9a, 0x46, 0xd4, 0x38, 0xf3, 0xd3, 0xc6, 0x6d, 0x67, 0xa5, 0xdc, 0x07, 0x82,
	0xde, 0x1f, 0x5b, 0xf8, 0xa1, 0x6c, 0x67, 0x66, 0xaa, 0x76, 0x62, 0x27, 0xc3, 0xf4, 0xf8, 0x95,
	0xc0, 0x80, 0x87, 0x78, 0x72, 0x05, 0x3d, 0xa7, 0xeb, 0x3c, 0x99, 0x24, 0xc5, 0x90, 0xb7, 0xbf,
	0xf4, 0x09, 0xd2, 0xa5, 0x16, 0x86, 0x14, 0x90, 0x96, 0x5a, 0x98, 0x3c, 0x99, 0xf4, 0x8a, 0xd1,
	0xfc, 0x86, 0x85, 0x7c, 0xd6, 0xe5, 0xb3, 0xa5, 0xdc, 0x73, 0x4f, 0xd0, 0x77, 0x48, 0x39, 0x1a,
	0x45, 0xa6, 0xd0, 0xd7, 0x68, 0x5c, 0x6d, 0x7d, 0xdc, 0xa9, 0x33, 0x91, 0x21, 0x05, 0x0c, 0xe2,
	0x8e, 0xf9, 0x99, 0xc7, 0xc7, 0x81, 0x63, 0xb1, 0x1a, 0xef, 0xec, 0xf9, 0x77, 0x02, 0xe3, 0x28,
	0xbe, 0x95, 0xb2, 0x14, 0xa8, 0xc9, 0x33, 0x64, 0xab, 0x46, 0x6e, 0x77, 0x62, 0x6d, 0xb5, 0xab,
	0x2c, 0xb9, 0xfd, 0x77, 0xd5, 0x4b, 0xbb, 0x3e, 0xcd, 0x63, 0x66, 0x80, 0x59, 0xa0, 0x7d, 0xd9,
	0x15, 0x0c, 0x83, 0xe8, 0x34, 0x92, 0x87, 0x43, 0xec, 0xd7, 0xe0, 0xf8, 0xe9, 0xd0, 0x58, 0x7a,
	0x22, 0x9e, 0x4c, 0x61, 0x14, 0x8b, 0xad, 0x15, 0x56, 0x24, 0x8b, 0x31, 0xe1, 0xee, 0xcb, 0x38,
	0xbd, 0x3a, 0x59, 0x79, 0x7b, 0xf1, 0xf7, 0xec, 0xd7, 0x87, 0xbb, 0xb2, 0xf6, 0xc5, 0xe9, 0xb1,
	0xd8, 0xf6, 0xdc, 0xf4, 0xbd, 0xb6, 0xf8, 0x09, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xd3, 0x70, 0xfe,
	0x11, 0x02, 0x00, 0x00,
}
