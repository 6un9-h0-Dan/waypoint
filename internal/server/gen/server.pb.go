// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package hashicorp_devflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import status "google.golang.org/genproto/googleapis/rpc/status"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Supported component types, the values here MUST match the enum values
// in the Go sdk/component package exactly. A test in internal/server
// validates this.
type Component_Type int32

const (
	Component_UNKNOWN  Component_Type = 0
	Component_BUILDER  Component_Type = 1
	Component_REGISTRY Component_Type = 2
)

var Component_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "BUILDER",
	2: "REGISTRY",
}
var Component_Type_value = map[string]int32{
	"UNKNOWN":  0,
	"BUILDER":  1,
	"REGISTRY": 2,
}

func (x Component_Type) String() string {
	return proto.EnumName(Component_Type_name, int32(x))
}
func (Component_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{0, 0}
}

type Status_State int32

const (
	Status_UNKNOWN Status_State = 0
	Status_RUNNING Status_State = 1
	Status_SUCCESS Status_State = 2
	Status_ERROR   Status_State = 3
)

var Status_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "RUNNING",
	2: "SUCCESS",
	3: "ERROR",
}
var Status_State_value = map[string]int32{
	"UNKNOWN": 0,
	"RUNNING": 1,
	"SUCCESS": 2,
	"ERROR":   3,
}

func (x Status_State) String() string {
	return proto.EnumName(Status_State_name, int32(x))
}
func (Status_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{1, 0}
}

type ListDeploymentsRequest_Order int32

const (
	ListDeploymentsRequest_UNSET         ListDeploymentsRequest_Order = 0
	ListDeploymentsRequest_START_TIME    ListDeploymentsRequest_Order = 1
	ListDeploymentsRequest_COMPLETE_TIME ListDeploymentsRequest_Order = 2
)

var ListDeploymentsRequest_Order_name = map[int32]string{
	0: "UNSET",
	1: "START_TIME",
	2: "COMPLETE_TIME",
}
var ListDeploymentsRequest_Order_value = map[string]int32{
	"UNSET":         0,
	"START_TIME":    1,
	"COMPLETE_TIME": 2,
}

func (x ListDeploymentsRequest_Order) String() string {
	return proto.EnumName(ListDeploymentsRequest_Order_name, int32(x))
}
func (ListDeploymentsRequest_Order) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{14, 0}
}

// Component represents metadata about a component. A component is the
// generic name for a builder, registry, platform, etc.
type Component struct {
	// type of the component
	Type Component_Type `protobuf:"varint,1,opt,name=type,proto3,enum=hashicorp.devflow.Component_Type" json:"type,omitempty"`
	// name of the component
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Component) Reset()         { *m = Component{} }
func (m *Component) String() string { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()    {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{0}
}
func (m *Component) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Component.Unmarshal(m, b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Component.Marshal(b, m, deterministic)
}
func (dst *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(dst, src)
}
func (m *Component) XXX_Size() int {
	return xxx_messageInfo_Component.Size(m)
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

func (m *Component) GetType() Component_Type {
	if m != nil {
		return m.Type
	}
	return Component_UNKNOWN
}

func (m *Component) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Status represents the status of an async operation.
type Status struct {
	// state is the state of this operation.
	State Status_State `protobuf:"varint,1,opt,name=state,proto3,enum=hashicorp.devflow.Status_State" json:"state,omitempty"`
	// details may be non-empty to provide human-friendly information
	// about the current status. This may change between status updates
	// for the same state to provide updated details about the state.
	Details string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// error is set if the state == ERROR with the error that occurred.
	Error *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// start_time is the time the operation was started.
	StartTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// complete_time is the time the operation completed (success or fail).
	CompleteTime         *timestamp.Timestamp `protobuf:"bytes,5,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{1}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetState() Status_State {
	if m != nil {
		return m.State
	}
	return Status_UNKNOWN
}

func (m *Status) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

func (m *Status) GetError() *status.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Status) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Status) GetCompleteTime() *timestamp.Timestamp {
	if m != nil {
		return m.CompleteTime
	}
	return nil
}

type StatusFilter struct {
	// Filters are ANDed together.
	Filters              []*StatusFilter_Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StatusFilter) Reset()         { *m = StatusFilter{} }
func (m *StatusFilter) String() string { return proto.CompactTextString(m) }
func (*StatusFilter) ProtoMessage()    {}
func (*StatusFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{2}
}
func (m *StatusFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusFilter.Unmarshal(m, b)
}
func (m *StatusFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusFilter.Marshal(b, m, deterministic)
}
func (dst *StatusFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusFilter.Merge(dst, src)
}
func (m *StatusFilter) XXX_Size() int {
	return xxx_messageInfo_StatusFilter.Size(m)
}
func (m *StatusFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusFilter.DiscardUnknown(m)
}

var xxx_messageInfo_StatusFilter proto.InternalMessageInfo

func (m *StatusFilter) GetFilters() []*StatusFilter_Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type StatusFilter_Filter struct {
	// Types that are valid to be assigned to Filter:
	//	*StatusFilter_Filter_State
	Filter               isStatusFilter_Filter_Filter `protobuf_oneof:"filter"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *StatusFilter_Filter) Reset()         { *m = StatusFilter_Filter{} }
func (m *StatusFilter_Filter) String() string { return proto.CompactTextString(m) }
func (*StatusFilter_Filter) ProtoMessage()    {}
func (*StatusFilter_Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{2, 0}
}
func (m *StatusFilter_Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusFilter_Filter.Unmarshal(m, b)
}
func (m *StatusFilter_Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusFilter_Filter.Marshal(b, m, deterministic)
}
func (dst *StatusFilter_Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusFilter_Filter.Merge(dst, src)
}
func (m *StatusFilter_Filter) XXX_Size() int {
	return xxx_messageInfo_StatusFilter_Filter.Size(m)
}
func (m *StatusFilter_Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusFilter_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_StatusFilter_Filter proto.InternalMessageInfo

type isStatusFilter_Filter_Filter interface {
	isStatusFilter_Filter_Filter()
}

type StatusFilter_Filter_State struct {
	State Status_State `protobuf:"varint,2,opt,name=state,proto3,enum=hashicorp.devflow.Status_State,oneof"`
}

func (*StatusFilter_Filter_State) isStatusFilter_Filter_Filter() {}

func (m *StatusFilter_Filter) GetFilter() isStatusFilter_Filter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *StatusFilter_Filter) GetState() Status_State {
	if x, ok := m.GetFilter().(*StatusFilter_Filter_State); ok {
		return x.State
	}
	return Status_UNKNOWN
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StatusFilter_Filter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StatusFilter_Filter_OneofMarshaler, _StatusFilter_Filter_OneofUnmarshaler, _StatusFilter_Filter_OneofSizer, []interface{}{
		(*StatusFilter_Filter_State)(nil),
	}
}

func _StatusFilter_Filter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StatusFilter_Filter)
	// filter
	switch x := m.Filter.(type) {
	case *StatusFilter_Filter_State:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.State))
	case nil:
	default:
		return fmt.Errorf("StatusFilter_Filter.Filter has unexpected type %T", x)
	}
	return nil
}

func _StatusFilter_Filter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StatusFilter_Filter)
	switch tag {
	case 2: // filter.state
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Filter = &StatusFilter_Filter_State{Status_State(x)}
		return true, err
	default:
		return false, nil
	}
}

func _StatusFilter_Filter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StatusFilter_Filter)
	// filter
	switch x := m.Filter.(type) {
	case *StatusFilter_Filter_State:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.State))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UpsertBuildRequest struct {
	// Build to upsert. If an ID is not set, this will be an insert operation.
	// If the ID is set, that build is updated. It is an error if an update
	// is requested on a non-existent build.
	Build                *Build   `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsertBuildRequest) Reset()         { *m = UpsertBuildRequest{} }
func (m *UpsertBuildRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertBuildRequest) ProtoMessage()    {}
func (*UpsertBuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{3}
}
func (m *UpsertBuildRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertBuildRequest.Unmarshal(m, b)
}
func (m *UpsertBuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertBuildRequest.Marshal(b, m, deterministic)
}
func (dst *UpsertBuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertBuildRequest.Merge(dst, src)
}
func (m *UpsertBuildRequest) XXX_Size() int {
	return xxx_messageInfo_UpsertBuildRequest.Size(m)
}
func (m *UpsertBuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertBuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertBuildRequest proto.InternalMessageInfo

func (m *UpsertBuildRequest) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

type UpsertBuildResponse struct {
	Build                *Build   `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsertBuildResponse) Reset()         { *m = UpsertBuildResponse{} }
func (m *UpsertBuildResponse) String() string { return proto.CompactTextString(m) }
func (*UpsertBuildResponse) ProtoMessage()    {}
func (*UpsertBuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{4}
}
func (m *UpsertBuildResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertBuildResponse.Unmarshal(m, b)
}
func (m *UpsertBuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertBuildResponse.Marshal(b, m, deterministic)
}
func (dst *UpsertBuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertBuildResponse.Merge(dst, src)
}
func (m *UpsertBuildResponse) XXX_Size() int {
	return xxx_messageInfo_UpsertBuildResponse.Size(m)
}
func (m *UpsertBuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertBuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertBuildResponse proto.InternalMessageInfo

func (m *UpsertBuildResponse) GetBuild() *Build {
	if m != nil {
		return m.Build
	}
	return nil
}

type ListBuildsResponse struct {
	// builds is the list of builds.
	Builds               []*Build `protobuf:"bytes,1,rep,name=builds,proto3" json:"builds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBuildsResponse) Reset()         { *m = ListBuildsResponse{} }
func (m *ListBuildsResponse) String() string { return proto.CompactTextString(m) }
func (*ListBuildsResponse) ProtoMessage()    {}
func (*ListBuildsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{5}
}
func (m *ListBuildsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBuildsResponse.Unmarshal(m, b)
}
func (m *ListBuildsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBuildsResponse.Marshal(b, m, deterministic)
}
func (dst *ListBuildsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBuildsResponse.Merge(dst, src)
}
func (m *ListBuildsResponse) XXX_Size() int {
	return xxx_messageInfo_ListBuildsResponse.Size(m)
}
func (m *ListBuildsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBuildsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBuildsResponse proto.InternalMessageInfo

func (m *ListBuildsResponse) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

// Build represents a process of creating an artifact that can be in any state,
// such as complete. A successful complete build produces an artifact.
type Build struct {
	// id is the unique ID of the build
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// status of the build
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// component is the component that was used for this build
	Component *Component `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`
	// artifact is the result of the build if the status.state == SUCCESS
	Artifact             *Artifact `protobuf:"bytes,4,opt,name=artifact,proto3" json:"artifact,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Build) Reset()         { *m = Build{} }
func (m *Build) String() string { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()    {}
func (*Build) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{6}
}
func (m *Build) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Build.Unmarshal(m, b)
}
func (m *Build) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Build.Marshal(b, m, deterministic)
}
func (dst *Build) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Build.Merge(dst, src)
}
func (m *Build) XXX_Size() int {
	return xxx_messageInfo_Build.Size(m)
}
func (m *Build) XXX_DiscardUnknown() {
	xxx_messageInfo_Build.DiscardUnknown(m)
}

var xxx_messageInfo_Build proto.InternalMessageInfo

func (m *Build) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Build) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Build) GetComponent() *Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *Build) GetArtifact() *Artifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

// Artifact is the result of a build or registry. This is the metadata only.
// The binary contents of an artifact are expected to be stored in a registry.
type Artifact struct {
	// artifact is the full artifact encoded directly from the component plugin.
	// The receiving end must have access to the component proto files to
	// know how to decode this.
	Artifact             *any.Any `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Artifact) Reset()         { *m = Artifact{} }
func (m *Artifact) String() string { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()    {}
func (*Artifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{7}
}
func (m *Artifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Artifact.Unmarshal(m, b)
}
func (m *Artifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Artifact.Marshal(b, m, deterministic)
}
func (dst *Artifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artifact.Merge(dst, src)
}
func (m *Artifact) XXX_Size() int {
	return xxx_messageInfo_Artifact.Size(m)
}
func (m *Artifact) XXX_DiscardUnknown() {
	xxx_messageInfo_Artifact.DiscardUnknown(m)
}

var xxx_messageInfo_Artifact proto.InternalMessageInfo

func (m *Artifact) GetArtifact() *any.Any {
	if m != nil {
		return m.Artifact
	}
	return nil
}

type UpsertPushedArtifactRequest struct {
	// artifact to upsert. If the id in the artifact is empty, then this
	// will be an insert. Otherwise, this will be an update and if the ID
	// isn't found, it will be an error.
	Artifact             *PushedArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpsertPushedArtifactRequest) Reset()         { *m = UpsertPushedArtifactRequest{} }
func (m *UpsertPushedArtifactRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertPushedArtifactRequest) ProtoMessage()    {}
func (*UpsertPushedArtifactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{8}
}
func (m *UpsertPushedArtifactRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertPushedArtifactRequest.Unmarshal(m, b)
}
func (m *UpsertPushedArtifactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertPushedArtifactRequest.Marshal(b, m, deterministic)
}
func (dst *UpsertPushedArtifactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPushedArtifactRequest.Merge(dst, src)
}
func (m *UpsertPushedArtifactRequest) XXX_Size() int {
	return xxx_messageInfo_UpsertPushedArtifactRequest.Size(m)
}
func (m *UpsertPushedArtifactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPushedArtifactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPushedArtifactRequest proto.InternalMessageInfo

func (m *UpsertPushedArtifactRequest) GetArtifact() *PushedArtifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

type UpsertPushedArtifactResponse struct {
	// resulting push object, you should replace this with what was sent
	// since the update operation may touch up the input data (i.e. update
	// timestamps)
	Artifact             *PushedArtifact `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpsertPushedArtifactResponse) Reset()         { *m = UpsertPushedArtifactResponse{} }
func (m *UpsertPushedArtifactResponse) String() string { return proto.CompactTextString(m) }
func (*UpsertPushedArtifactResponse) ProtoMessage()    {}
func (*UpsertPushedArtifactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{9}
}
func (m *UpsertPushedArtifactResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertPushedArtifactResponse.Unmarshal(m, b)
}
func (m *UpsertPushedArtifactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertPushedArtifactResponse.Marshal(b, m, deterministic)
}
func (dst *UpsertPushedArtifactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPushedArtifactResponse.Merge(dst, src)
}
func (m *UpsertPushedArtifactResponse) XXX_Size() int {
	return xxx_messageInfo_UpsertPushedArtifactResponse.Size(m)
}
func (m *UpsertPushedArtifactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPushedArtifactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPushedArtifactResponse proto.InternalMessageInfo

func (m *UpsertPushedArtifactResponse) GetArtifact() *PushedArtifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

type ListPushedArtifactsResponse struct {
	// artifacts is the list of artifacts.
	Artifacts            []*PushedArtifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListPushedArtifactsResponse) Reset()         { *m = ListPushedArtifactsResponse{} }
func (m *ListPushedArtifactsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPushedArtifactsResponse) ProtoMessage()    {}
func (*ListPushedArtifactsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{10}
}
func (m *ListPushedArtifactsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPushedArtifactsResponse.Unmarshal(m, b)
}
func (m *ListPushedArtifactsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPushedArtifactsResponse.Marshal(b, m, deterministic)
}
func (dst *ListPushedArtifactsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPushedArtifactsResponse.Merge(dst, src)
}
func (m *ListPushedArtifactsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPushedArtifactsResponse.Size(m)
}
func (m *ListPushedArtifactsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPushedArtifactsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPushedArtifactsResponse proto.InternalMessageInfo

func (m *ListPushedArtifactsResponse) GetArtifacts() []*PushedArtifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

type PushedArtifact struct {
	// id is a unique ID for this push
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// status of the push operation
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// component that pushed this artifact
	Component *Component `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`
	// artifact is the artifact that was a result from the push.
	Artifact *Artifact `protobuf:"bytes,4,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// the id of the build that this pushed artifact was sourced from.
	BuildId              string   `protobuf:"bytes,5,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushedArtifact) Reset()         { *m = PushedArtifact{} }
func (m *PushedArtifact) String() string { return proto.CompactTextString(m) }
func (*PushedArtifact) ProtoMessage()    {}
func (*PushedArtifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{11}
}
func (m *PushedArtifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushedArtifact.Unmarshal(m, b)
}
func (m *PushedArtifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushedArtifact.Marshal(b, m, deterministic)
}
func (dst *PushedArtifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushedArtifact.Merge(dst, src)
}
func (m *PushedArtifact) XXX_Size() int {
	return xxx_messageInfo_PushedArtifact.Size(m)
}
func (m *PushedArtifact) XXX_DiscardUnknown() {
	xxx_messageInfo_PushedArtifact.DiscardUnknown(m)
}

var xxx_messageInfo_PushedArtifact proto.InternalMessageInfo

func (m *PushedArtifact) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PushedArtifact) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PushedArtifact) GetComponent() *Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *PushedArtifact) GetArtifact() *Artifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

func (m *PushedArtifact) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

type UpsertDeploymentRequest struct {
	// deployment to upsert. If the id in the artifact is empty, then this
	// will be an insert. Otherwise, this will be an update and if the ID
	// isn't found, it will be an error.
	Deployment           *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpsertDeploymentRequest) Reset()         { *m = UpsertDeploymentRequest{} }
func (m *UpsertDeploymentRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertDeploymentRequest) ProtoMessage()    {}
func (*UpsertDeploymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{12}
}
func (m *UpsertDeploymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertDeploymentRequest.Unmarshal(m, b)
}
func (m *UpsertDeploymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertDeploymentRequest.Marshal(b, m, deterministic)
}
func (dst *UpsertDeploymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertDeploymentRequest.Merge(dst, src)
}
func (m *UpsertDeploymentRequest) XXX_Size() int {
	return xxx_messageInfo_UpsertDeploymentRequest.Size(m)
}
func (m *UpsertDeploymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertDeploymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertDeploymentRequest proto.InternalMessageInfo

func (m *UpsertDeploymentRequest) GetDeployment() *Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

type UpsertDeploymentResponse struct {
	// resulting object, you should replace this with what was sent in the request
	// since the update operation may touch up the input data (i.e. update
	// timestamps)
	Deployment           *Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpsertDeploymentResponse) Reset()         { *m = UpsertDeploymentResponse{} }
func (m *UpsertDeploymentResponse) String() string { return proto.CompactTextString(m) }
func (*UpsertDeploymentResponse) ProtoMessage()    {}
func (*UpsertDeploymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{13}
}
func (m *UpsertDeploymentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertDeploymentResponse.Unmarshal(m, b)
}
func (m *UpsertDeploymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertDeploymentResponse.Marshal(b, m, deterministic)
}
func (dst *UpsertDeploymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertDeploymentResponse.Merge(dst, src)
}
func (m *UpsertDeploymentResponse) XXX_Size() int {
	return xxx_messageInfo_UpsertDeploymentResponse.Size(m)
}
func (m *UpsertDeploymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertDeploymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertDeploymentResponse proto.InternalMessageInfo

func (m *UpsertDeploymentResponse) GetDeployment() *Deployment {
	if m != nil {
		return m.Deployment
	}
	return nil
}

type ListDeploymentsRequest struct {
	// The filters to apply to this request. These are ORed, so you should
	// specify multiple filters in the StatusFilter for AND behavior.
	Status []*StatusFilter `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	// Order for the results.
	Order     ListDeploymentsRequest_Order `protobuf:"varint,2,opt,name=order,proto3,enum=hashicorp.devflow.ListDeploymentsRequest_Order" json:"order,omitempty"`
	OrderDesc bool                         `protobuf:"varint,3,opt,name=order_desc,json=orderDesc,proto3" json:"order_desc,omitempty"`
	// Limit the number of results
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDeploymentsRequest) Reset()         { *m = ListDeploymentsRequest{} }
func (m *ListDeploymentsRequest) String() string { return proto.CompactTextString(m) }
func (*ListDeploymentsRequest) ProtoMessage()    {}
func (*ListDeploymentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{14}
}
func (m *ListDeploymentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeploymentsRequest.Unmarshal(m, b)
}
func (m *ListDeploymentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeploymentsRequest.Marshal(b, m, deterministic)
}
func (dst *ListDeploymentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeploymentsRequest.Merge(dst, src)
}
func (m *ListDeploymentsRequest) XXX_Size() int {
	return xxx_messageInfo_ListDeploymentsRequest.Size(m)
}
func (m *ListDeploymentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeploymentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeploymentsRequest proto.InternalMessageInfo

func (m *ListDeploymentsRequest) GetStatus() []*StatusFilter {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListDeploymentsRequest) GetOrder() ListDeploymentsRequest_Order {
	if m != nil {
		return m.Order
	}
	return ListDeploymentsRequest_UNSET
}

func (m *ListDeploymentsRequest) GetOrderDesc() bool {
	if m != nil {
		return m.OrderDesc
	}
	return false
}

func (m *ListDeploymentsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListDeploymentsResponse struct {
	// deployments is the list of deployments.
	Deployments          []*Deployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListDeploymentsResponse) Reset()         { *m = ListDeploymentsResponse{} }
func (m *ListDeploymentsResponse) String() string { return proto.CompactTextString(m) }
func (*ListDeploymentsResponse) ProtoMessage()    {}
func (*ListDeploymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{15}
}
func (m *ListDeploymentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeploymentsResponse.Unmarshal(m, b)
}
func (m *ListDeploymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeploymentsResponse.Marshal(b, m, deterministic)
}
func (dst *ListDeploymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeploymentsResponse.Merge(dst, src)
}
func (m *ListDeploymentsResponse) XXX_Size() int {
	return xxx_messageInfo_ListDeploymentsResponse.Size(m)
}
func (m *ListDeploymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeploymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeploymentsResponse proto.InternalMessageInfo

func (m *ListDeploymentsResponse) GetDeployments() []*Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

type Deployment struct {
	// id is the unique ID for this deployment
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// status of the deployment
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// component that initiated this deployment
	Component *Component `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`
	// ID of the PushedArtifact that was deployed.
	ArtifactId string `protobuf:"bytes,4,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	// deployment is the full raw deployment object encoded directly from
	// the plugin. The client must have all the plugins setup to properly
	// decode this.
	Deployment           *any.Any `protobuf:"bytes,5,opt,name=deployment,proto3" json:"deployment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deployment) Reset()         { *m = Deployment{} }
func (m *Deployment) String() string { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()    {}
func (*Deployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{16}
}
func (m *Deployment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deployment.Unmarshal(m, b)
}
func (m *Deployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deployment.Marshal(b, m, deterministic)
}
func (dst *Deployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployment.Merge(dst, src)
}
func (m *Deployment) XXX_Size() int {
	return xxx_messageInfo_Deployment.Size(m)
}
func (m *Deployment) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployment.DiscardUnknown(m)
}

var xxx_messageInfo_Deployment proto.InternalMessageInfo

func (m *Deployment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Deployment) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Deployment) GetComponent() *Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *Deployment) GetArtifactId() string {
	if m != nil {
		return m.ArtifactId
	}
	return ""
}

func (m *Deployment) GetDeployment() *any.Any {
	if m != nil {
		return m.Deployment
	}
	return nil
}

type UpsertReleaseRequest struct {
	// release to upsert. If the id in the artifact is empty, then this
	// will be an insert. Otherwise, this will be an update and if the ID
	// isn't found, it will be an error.
	Release              *Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsertReleaseRequest) Reset()         { *m = UpsertReleaseRequest{} }
func (m *UpsertReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertReleaseRequest) ProtoMessage()    {}
func (*UpsertReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{17}
}
func (m *UpsertReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertReleaseRequest.Unmarshal(m, b)
}
func (m *UpsertReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertReleaseRequest.Marshal(b, m, deterministic)
}
func (dst *UpsertReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertReleaseRequest.Merge(dst, src)
}
func (m *UpsertReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_UpsertReleaseRequest.Size(m)
}
func (m *UpsertReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertReleaseRequest proto.InternalMessageInfo

func (m *UpsertReleaseRequest) GetRelease() *Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type UpsertReleaseResponse struct {
	// resulting object, you should replace this with what was sent in the request
	// since the update operation may touch up the input data (i.e. update
	// timestamps)
	Release              *Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsertReleaseResponse) Reset()         { *m = UpsertReleaseResponse{} }
func (m *UpsertReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*UpsertReleaseResponse) ProtoMessage()    {}
func (*UpsertReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{18}
}
func (m *UpsertReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertReleaseResponse.Unmarshal(m, b)
}
func (m *UpsertReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertReleaseResponse.Marshal(b, m, deterministic)
}
func (dst *UpsertReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertReleaseResponse.Merge(dst, src)
}
func (m *UpsertReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_UpsertReleaseResponse.Size(m)
}
func (m *UpsertReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertReleaseResponse proto.InternalMessageInfo

func (m *UpsertReleaseResponse) GetRelease() *Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type Release struct {
	// id is the unique ID for this release.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// status of the release operation.
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// component managing the release process.
	Component *Component `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`
	// release is the raw release object encoded directly from the plugin.
	Release *any.Any `protobuf:"bytes,4,opt,name=release,proto3" json:"release,omitempty"`
	// split traffic between multiple deployments
	TrafficSplit         *Release_Split `protobuf:"bytes,5,opt,name=traffic_split,json=trafficSplit,proto3" json:"traffic_split,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Release) Reset()         { *m = Release{} }
func (m *Release) String() string { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()    {}
func (*Release) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{19}
}
func (m *Release) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release.Unmarshal(m, b)
}
func (m *Release) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release.Marshal(b, m, deterministic)
}
func (dst *Release) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release.Merge(dst, src)
}
func (m *Release) XXX_Size() int {
	return xxx_messageInfo_Release.Size(m)
}
func (m *Release) XXX_DiscardUnknown() {
	xxx_messageInfo_Release.DiscardUnknown(m)
}

var xxx_messageInfo_Release proto.InternalMessageInfo

func (m *Release) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Release) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Release) GetComponent() *Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *Release) GetRelease() *any.Any {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *Release) GetTrafficSplit() *Release_Split {
	if m != nil {
		return m.TrafficSplit
	}
	return nil
}

type Release_Split struct {
	Targets              []*Release_SplitTarget `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Release_Split) Reset()         { *m = Release_Split{} }
func (m *Release_Split) String() string { return proto.CompactTextString(m) }
func (*Release_Split) ProtoMessage()    {}
func (*Release_Split) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{19, 0}
}
func (m *Release_Split) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release_Split.Unmarshal(m, b)
}
func (m *Release_Split) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release_Split.Marshal(b, m, deterministic)
}
func (dst *Release_Split) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release_Split.Merge(dst, src)
}
func (m *Release_Split) XXX_Size() int {
	return xxx_messageInfo_Release_Split.Size(m)
}
func (m *Release_Split) XXX_DiscardUnknown() {
	xxx_messageInfo_Release_Split.DiscardUnknown(m)
}

var xxx_messageInfo_Release_Split proto.InternalMessageInfo

func (m *Release_Split) GetTargets() []*Release_SplitTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

type Release_SplitTarget struct {
	// id the deployment target
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// percentage of traffic
	Percent              int32    `protobuf:"varint,2,opt,name=percent,proto3" json:"percent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Release_SplitTarget) Reset()         { *m = Release_SplitTarget{} }
func (m *Release_SplitTarget) String() string { return proto.CompactTextString(m) }
func (*Release_SplitTarget) ProtoMessage()    {}
func (*Release_SplitTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_6ddd20369733213e, []int{19, 1}
}
func (m *Release_SplitTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release_SplitTarget.Unmarshal(m, b)
}
func (m *Release_SplitTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release_SplitTarget.Marshal(b, m, deterministic)
}
func (dst *Release_SplitTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release_SplitTarget.Merge(dst, src)
}
func (m *Release_SplitTarget) XXX_Size() int {
	return xxx_messageInfo_Release_SplitTarget.Size(m)
}
func (m *Release_SplitTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_Release_SplitTarget.DiscardUnknown(m)
}

var xxx_messageInfo_Release_SplitTarget proto.InternalMessageInfo

func (m *Release_SplitTarget) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *Release_SplitTarget) GetPercent() int32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

func init() {
	proto.RegisterType((*Component)(nil), "hashicorp.devflow.Component")
	proto.RegisterType((*Status)(nil), "hashicorp.devflow.Status")
	proto.RegisterType((*StatusFilter)(nil), "hashicorp.devflow.StatusFilter")
	proto.RegisterType((*StatusFilter_Filter)(nil), "hashicorp.devflow.StatusFilter.Filter")
	proto.RegisterType((*UpsertBuildRequest)(nil), "hashicorp.devflow.UpsertBuildRequest")
	proto.RegisterType((*UpsertBuildResponse)(nil), "hashicorp.devflow.UpsertBuildResponse")
	proto.RegisterType((*ListBuildsResponse)(nil), "hashicorp.devflow.ListBuildsResponse")
	proto.RegisterType((*Build)(nil), "hashicorp.devflow.Build")
	proto.RegisterType((*Artifact)(nil), "hashicorp.devflow.Artifact")
	proto.RegisterType((*UpsertPushedArtifactRequest)(nil), "hashicorp.devflow.UpsertPushedArtifactRequest")
	proto.RegisterType((*UpsertPushedArtifactResponse)(nil), "hashicorp.devflow.UpsertPushedArtifactResponse")
	proto.RegisterType((*ListPushedArtifactsResponse)(nil), "hashicorp.devflow.ListPushedArtifactsResponse")
	proto.RegisterType((*PushedArtifact)(nil), "hashicorp.devflow.PushedArtifact")
	proto.RegisterType((*UpsertDeploymentRequest)(nil), "hashicorp.devflow.UpsertDeploymentRequest")
	proto.RegisterType((*UpsertDeploymentResponse)(nil), "hashicorp.devflow.UpsertDeploymentResponse")
	proto.RegisterType((*ListDeploymentsRequest)(nil), "hashicorp.devflow.ListDeploymentsRequest")
	proto.RegisterType((*ListDeploymentsResponse)(nil), "hashicorp.devflow.ListDeploymentsResponse")
	proto.RegisterType((*Deployment)(nil), "hashicorp.devflow.Deployment")
	proto.RegisterType((*UpsertReleaseRequest)(nil), "hashicorp.devflow.UpsertReleaseRequest")
	proto.RegisterType((*UpsertReleaseResponse)(nil), "hashicorp.devflow.UpsertReleaseResponse")
	proto.RegisterType((*Release)(nil), "hashicorp.devflow.Release")
	proto.RegisterType((*Release_Split)(nil), "hashicorp.devflow.Release.Split")
	proto.RegisterType((*Release_SplitTarget)(nil), "hashicorp.devflow.Release.SplitTarget")
	proto.RegisterEnum("hashicorp.devflow.Component_Type", Component_Type_name, Component_Type_value)
	proto.RegisterEnum("hashicorp.devflow.Status_State", Status_State_name, Status_State_value)
	proto.RegisterEnum("hashicorp.devflow.ListDeploymentsRequest_Order", ListDeploymentsRequest_Order_name, ListDeploymentsRequest_Order_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DevflowClient is the client API for Devflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DevflowClient interface {
	// ListBuilds returns the builds.
	ListBuilds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	// ListPushedArtifacts returns the builds.
	ListPushedArtifacts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListPushedArtifactsResponse, error)
	// ListDeployments returns the deployments.
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	// GetLatestBuild returns the most recent successfully completed build
	// for an app.
	GetLatestBuild(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Build, error)
	// GetLatestPushedArtifact returns the most recent successfully completed
	// artifact push for an app.
	GetLatestPushedArtifact(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PushedArtifact, error)
	// UpsertBuild updates or inserts a build. A build is responsible for
	// taking some set of source information and turning it into an initial
	// artifact. This artifact is considered "local" until it is pushed.
	UpsertBuild(ctx context.Context, in *UpsertBuildRequest, opts ...grpc.CallOption) (*UpsertBuildResponse, error)
	// UpsertPushedArtifact updates or inserts a pushed artifact. This is
	// useful for local operations to work on a pushed artifact.
	UpsertPushedArtifact(ctx context.Context, in *UpsertPushedArtifactRequest, opts ...grpc.CallOption) (*UpsertPushedArtifactResponse, error)
	// UpsertDeployment updates or inserts a deployment.
	UpsertDeployment(ctx context.Context, in *UpsertDeploymentRequest, opts ...grpc.CallOption) (*UpsertDeploymentResponse, error)
	// UpsertRelease updates or inserts a release.
	UpsertRelease(ctx context.Context, in *UpsertReleaseRequest, opts ...grpc.CallOption) (*UpsertReleaseResponse, error)
}

type devflowClient struct {
	cc *grpc.ClientConn
}

func NewDevflowClient(cc *grpc.ClientConn) DevflowClient {
	return &devflowClient{cc}
}

func (c *devflowClient) ListBuilds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	out := new(ListBuildsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.devflow.Devflow/ListBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devflowClient) ListPushedArtifacts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListPushedArtifactsResponse, error) {
	out := new(ListPushedArtifactsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.devflow.Devflow/ListPushedArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devflowClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.devflow.Devflow/ListDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devflowClient) GetLatestBuild(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/hashicorp.devflow.Devflow/GetLatestBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devflowClient) GetLatestPushedArtifact(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PushedArtifact, error) {
	out := new(PushedArtifact)
	err := c.cc.Invoke(ctx, "/hashicorp.devflow.Devflow/GetLatestPushedArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devflowClient) UpsertBuild(ctx context.Context, in *UpsertBuildRequest, opts ...grpc.CallOption) (*UpsertBuildResponse, error) {
	out := new(UpsertBuildResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.devflow.Devflow/UpsertBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devflowClient) UpsertPushedArtifact(ctx context.Context, in *UpsertPushedArtifactRequest, opts ...grpc.CallOption) (*UpsertPushedArtifactResponse, error) {
	out := new(UpsertPushedArtifactResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.devflow.Devflow/UpsertPushedArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devflowClient) UpsertDeployment(ctx context.Context, in *UpsertDeploymentRequest, opts ...grpc.CallOption) (*UpsertDeploymentResponse, error) {
	out := new(UpsertDeploymentResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.devflow.Devflow/UpsertDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devflowClient) UpsertRelease(ctx context.Context, in *UpsertReleaseRequest, opts ...grpc.CallOption) (*UpsertReleaseResponse, error) {
	out := new(UpsertReleaseResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.devflow.Devflow/UpsertRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevflowServer is the server API for Devflow service.
type DevflowServer interface {
	// ListBuilds returns the builds.
	ListBuilds(context.Context, *empty.Empty) (*ListBuildsResponse, error)
	// ListPushedArtifacts returns the builds.
	ListPushedArtifacts(context.Context, *empty.Empty) (*ListPushedArtifactsResponse, error)
	// ListDeployments returns the deployments.
	ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	// GetLatestBuild returns the most recent successfully completed build
	// for an app.
	GetLatestBuild(context.Context, *empty.Empty) (*Build, error)
	// GetLatestPushedArtifact returns the most recent successfully completed
	// artifact push for an app.
	GetLatestPushedArtifact(context.Context, *empty.Empty) (*PushedArtifact, error)
	// UpsertBuild updates or inserts a build. A build is responsible for
	// taking some set of source information and turning it into an initial
	// artifact. This artifact is considered "local" until it is pushed.
	UpsertBuild(context.Context, *UpsertBuildRequest) (*UpsertBuildResponse, error)
	// UpsertPushedArtifact updates or inserts a pushed artifact. This is
	// useful for local operations to work on a pushed artifact.
	UpsertPushedArtifact(context.Context, *UpsertPushedArtifactRequest) (*UpsertPushedArtifactResponse, error)
	// UpsertDeployment updates or inserts a deployment.
	UpsertDeployment(context.Context, *UpsertDeploymentRequest) (*UpsertDeploymentResponse, error)
	// UpsertRelease updates or inserts a release.
	UpsertRelease(context.Context, *UpsertReleaseRequest) (*UpsertReleaseResponse, error)
}

func RegisterDevflowServer(s *grpc.Server, srv DevflowServer) {
	s.RegisterService(&_Devflow_serviceDesc, srv)
}

func _Devflow_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevflowServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.devflow.Devflow/ListBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevflowServer).ListBuilds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devflow_ListPushedArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevflowServer).ListPushedArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.devflow.Devflow/ListPushedArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevflowServer).ListPushedArtifacts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devflow_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevflowServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.devflow.Devflow/ListDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevflowServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devflow_GetLatestBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevflowServer).GetLatestBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.devflow.Devflow/GetLatestBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevflowServer).GetLatestBuild(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devflow_GetLatestPushedArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevflowServer).GetLatestPushedArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.devflow.Devflow/GetLatestPushedArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevflowServer).GetLatestPushedArtifact(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devflow_UpsertBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevflowServer).UpsertBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.devflow.Devflow/UpsertBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevflowServer).UpsertBuild(ctx, req.(*UpsertBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devflow_UpsertPushedArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPushedArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevflowServer).UpsertPushedArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.devflow.Devflow/UpsertPushedArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevflowServer).UpsertPushedArtifact(ctx, req.(*UpsertPushedArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devflow_UpsertDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevflowServer).UpsertDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.devflow.Devflow/UpsertDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevflowServer).UpsertDeployment(ctx, req.(*UpsertDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Devflow_UpsertRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevflowServer).UpsertRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.devflow.Devflow/UpsertRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevflowServer).UpsertRelease(ctx, req.(*UpsertReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Devflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.devflow.Devflow",
	HandlerType: (*DevflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBuilds",
			Handler:    _Devflow_ListBuilds_Handler,
		},
		{
			MethodName: "ListPushedArtifacts",
			Handler:    _Devflow_ListPushedArtifacts_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _Devflow_ListDeployments_Handler,
		},
		{
			MethodName: "GetLatestBuild",
			Handler:    _Devflow_GetLatestBuild_Handler,
		},
		{
			MethodName: "GetLatestPushedArtifact",
			Handler:    _Devflow_GetLatestPushedArtifact_Handler,
		},
		{
			MethodName: "UpsertBuild",
			Handler:    _Devflow_UpsertBuild_Handler,
		},
		{
			MethodName: "UpsertPushedArtifact",
			Handler:    _Devflow_UpsertPushedArtifact_Handler,
		},
		{
			MethodName: "UpsertDeployment",
			Handler:    _Devflow_UpsertDeployment_Handler,
		},
		{
			MethodName: "UpsertRelease",
			Handler:    _Devflow_UpsertRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_server_6ddd20369733213e) }

var fileDescriptor_server_6ddd20369733213e = []byte{
	// 1158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xae, 0x1c, 0xcb, 0x3f, 0xc7, 0x76, 0x70, 0xb7, 0xa1, 0x71, 0x94, 0x76, 0x12, 0xc4, 0x50,
	0x4c, 0x99, 0x51, 0x8a, 0x69, 0x26, 0x53, 0x06, 0xa6, 0xe4, 0x47, 0x0d, 0x9e, 0x38, 0x4e, 0x67,
	0x6d, 0x0f, 0x94, 0x69, 0xf1, 0x28, 0xd6, 0x3a, 0xd1, 0x60, 0x5b, 0x42, 0xda, 0xb4, 0x93, 0x7b,
	0x86, 0x67, 0xe0, 0x86, 0x17, 0xe1, 0x86, 0x67, 0x01, 0x5e, 0x84, 0xd1, 0xfe, 0xc8, 0x7f, 0x52,
	0x6c, 0xe8, 0x45, 0x87, 0x2b, 0x6b, 0xcf, 0x7e, 0xdf, 0xb7, 0xbb, 0xe7, 0x3b, 0x3e, 0xbb, 0x50,
	0x0c, 0x88, 0xff, 0x9a, 0xf8, 0x86, 0xe7, 0xbb, 0xd4, 0x45, 0xb7, 0x2f, 0xad, 0xe0, 0xd2, 0xe9,
	0xb9, 0xbe, 0x67, 0xd8, 0xe4, 0x75, 0x7f, 0xe0, 0xbe, 0xd1, 0x36, 0x2e, 0x5c, 0xf7, 0x62, 0x40,
	0x76, 0x18, 0xe0, 0xfc, 0xaa, 0xbf, 0x63, 0x8d, 0xae, 0x39, 0x5a, 0xdb, 0x9c, 0x9d, 0x22, 0x43,
	0x8f, 0xca, 0xc9, 0xad, 0xd9, 0x49, 0xea, 0x0c, 0x49, 0x40, 0xad, 0xa1, 0x27, 0x00, 0xeb, 0x02,
	0xe0, 0x7b, 0xbd, 0x9d, 0x80, 0x5a, 0xf4, 0x2a, 0xe0, 0x13, 0xfa, 0x2f, 0x0a, 0xe4, 0x0f, 0xdd,
	0xa1, 0xe7, 0x8e, 0xc8, 0x88, 0xa2, 0x5d, 0x48, 0xd3, 0x6b, 0x8f, 0x54, 0x94, 0x6d, 0xa5, 0xba,
	0x5a, 0xfb, 0xc0, 0x98, 0xdb, 0xa1, 0x11, 0x61, 0x8d, 0xf6, 0xb5, 0x47, 0x30, 0x83, 0x23, 0x04,
	0xe9, 0x91, 0x35, 0x24, 0x95, 0xd4, 0xb6, 0x52, 0xcd, 0x63, 0xf6, 0xad, 0x1b, 0x90, 0x0e, 0x11,
	0xa8, 0x00, 0xd9, 0x4e, 0xf3, 0xa4, 0x79, 0xf6, 0x6d, 0xb3, 0x7c, 0x2b, 0x1c, 0x1c, 0x74, 0xea,
	0x8d, 0x23, 0x13, 0x97, 0x15, 0x54, 0x84, 0x1c, 0x36, 0x8f, 0xeb, 0xad, 0x36, 0x7e, 0x51, 0x4e,
	0xe9, 0xbf, 0xa7, 0x20, 0xd3, 0x62, 0x3b, 0x43, 0xbb, 0xa0, 0x86, 0x7b, 0x94, 0xdb, 0xd8, 0x8a,
	0xd9, 0x06, 0x47, 0xb2, 0x1f, 0x82, 0x39, 0x1a, 0x55, 0x20, 0x6b, 0x13, 0x6a, 0x39, 0x83, 0x40,
	0x6c, 0x44, 0x0e, 0x51, 0x15, 0x54, 0xe2, 0xfb, 0xae, 0x5f, 0x59, 0xd9, 0x56, 0xaa, 0x85, 0x1a,
	0x32, 0x78, 0x36, 0x0c, 0xdf, 0xeb, 0x09, 0x25, 0xcc, 0x01, 0xe8, 0x09, 0x40, 0x40, 0x2d, 0x9f,
	0x76, 0xc3, 0x04, 0x56, 0xd2, 0x0c, 0xae, 0x49, 0xb8, 0xcc, 0xae, 0xd1, 0x96, 0xd9, 0xc5, 0x79,
	0x86, 0x0e, 0xc7, 0xe8, 0x29, 0x94, 0x7a, 0xee, 0xd0, 0x1b, 0x10, 0x4a, 0x38, 0x5b, 0x5d, 0xc8,
	0x2e, 0x4a, 0x42, 0x18, 0xd2, 0x9f, 0x80, 0xca, 0xce, 0x33, 0x97, 0x32, 0xdc, 0x69, 0x36, 0xeb,
	0xcd, 0xe3, 0xb2, 0x12, 0x0e, 0x5a, 0x9d, 0xc3, 0x43, 0xb3, 0xd5, 0x2a, 0xa7, 0x50, 0x1e, 0x54,
	0x13, 0xe3, 0x33, 0x5c, 0x5e, 0xd1, 0x7f, 0x53, 0xa0, 0xc8, 0x0f, 0xf2, 0xcc, 0x19, 0x50, 0xe2,
	0xa3, 0xaf, 0x21, 0xdb, 0x67, 0x5f, 0x41, 0x45, 0xd9, 0x5e, 0xa9, 0x16, 0x6a, 0x0f, 0x12, 0x93,
	0xc8, 0x19, 0x06, 0xff, 0xc1, 0x92, 0xa6, 0x9d, 0x40, 0x46, 0x68, 0xed, 0x49, 0x3b, 0x52, 0x4b,
	0xd9, 0xf1, 0xcd, 0x2d, 0x61, 0xc8, 0x41, 0x0e, 0x32, 0x5c, 0x4d, 0x3f, 0x02, 0xd4, 0xf1, 0x02,
	0xe2, 0xd3, 0x83, 0x2b, 0x67, 0x60, 0x63, 0xf2, 0xd3, 0x15, 0x09, 0x28, 0x32, 0x40, 0x3d, 0x0f,
	0xc7, 0xcc, 0xe7, 0x42, 0xad, 0x12, 0x23, 0xcc, 0xf1, 0x1c, 0xa6, 0x9b, 0x70, 0x67, 0x4a, 0x25,
	0xf0, 0xdc, 0x51, 0x40, 0xfe, 0xb5, 0xcc, 0x33, 0x40, 0x0d, 0x27, 0xe0, 0x22, 0x41, 0xa4, 0xf2,
	0x08, 0x32, 0x6c, 0x5a, 0x26, 0x2c, 0x59, 0x46, 0xe0, 0xf4, 0x3f, 0x14, 0x50, 0x59, 0x04, 0xad,
	0x42, 0xca, 0xe1, 0xcb, 0xe7, 0x71, 0xca, 0xb1, 0xd1, 0x67, 0x90, 0xe1, 0x7f, 0x32, 0x96, 0xb2,
	0x42, 0x6d, 0x23, 0x31, 0x65, 0x58, 0x00, 0xd1, 0x17, 0x90, 0xef, 0xc9, 0xbf, 0x96, 0x28, 0xd3,
	0x7b, 0x37, 0xfd, 0xfd, 0xf0, 0x18, 0x8e, 0xf6, 0x20, 0x67, 0xf9, 0xd4, 0xe9, 0x5b, 0x3d, 0x2a,
	0x4a, 0x76, 0x33, 0x86, 0xba, 0x2f, 0x20, 0x38, 0x02, 0xeb, 0x5f, 0x42, 0x4e, 0x46, 0xd1, 0xa3,
	0x09, 0x11, 0x9e, 0xc8, 0xb5, 0xb9, 0xca, 0xdd, 0x1f, 0x5d, 0x4f, 0xb0, 0x5f, 0xc2, 0x26, 0xb7,
	0xe3, 0xf9, 0x55, 0x70, 0x49, 0xec, 0x48, 0x5f, 0xb8, 0xfb, 0xd5, 0x9c, 0x60, 0x5c, 0x3f, 0x99,
	0xe1, 0x8e, 0xd5, 0x5f, 0xc1, 0xbd, 0x78, 0x75, 0xe1, 0xd7, 0x5b, 0xca, 0xff, 0x00, 0x9b, 0x61,
	0x11, 0x4c, 0xcf, 0x8f, 0xab, 0xe1, 0x29, 0xe4, 0x25, 0x54, 0x16, 0xc4, 0x12, 0xf2, 0x63, 0x8e,
	0xfe, 0xb7, 0x02, 0xab, 0xd3, 0xb3, 0xff, 0xd7, 0x2a, 0x41, 0x1b, 0x90, 0x63, 0x15, 0xdf, 0x75,
	0x6c, 0xd6, 0xd3, 0xf2, 0x38, 0xcb, 0xc6, 0x75, 0x5b, 0xff, 0x0e, 0xd6, 0xb9, 0x49, 0x47, 0xc4,
	0x1b, 0xb8, 0xd7, 0xc3, 0x70, 0xc9, 0xc8, 0x7e, 0xb0, 0xa3, 0xa0, 0x70, 0xe8, 0x7e, 0xcc, 0x82,
	0x13, 0xcc, 0x09, 0x82, 0xfe, 0x02, 0x2a, 0xf3, 0xca, 0x91, 0xf5, 0x6f, 0x25, 0xfd, 0x73, 0x0a,
	0xee, 0x86, 0xde, 0x8f, 0xa7, 0x03, 0xb9, 0xe9, 0xbd, 0xc8, 0x12, 0xee, 0xf9, 0xd6, 0x82, 0xae,
	0x19, 0x19, 0x63, 0x82, 0xea, 0xfa, 0x36, 0xf1, 0x45, 0x8f, 0xdc, 0x89, 0xe1, 0xc5, 0x2f, 0x69,
	0x9c, 0x85, 0x34, 0xcc, 0xd9, 0xe8, 0x3e, 0x00, 0xfb, 0xe8, 0xda, 0x24, 0xe8, 0x31, 0x83, 0x73,
	0x38, 0xcf, 0x22, 0x47, 0x24, 0xe8, 0xa1, 0x35, 0x50, 0x07, 0xce, 0xd0, 0xe1, 0xfe, 0x95, 0x30,
	0x1f, 0xe8, 0xbb, 0xa0, 0x32, 0x91, 0xf0, 0x42, 0xe8, 0x34, 0x5b, 0x66, 0xbb, 0x7c, 0x0b, 0xad,
	0x02, 0xb4, 0xda, 0xfb, 0xb8, 0xdd, 0x6d, 0xd7, 0x4f, 0xcd, 0xb2, 0x82, 0x6e, 0x43, 0xe9, 0xf0,
	0xec, 0xf4, 0x79, 0xc3, 0x6c, 0x9b, 0x3c, 0x94, 0xd2, 0xbf, 0x87, 0xf5, 0xb9, 0x2d, 0x45, 0xd5,
	0x5f, 0x18, 0xe7, 0x4b, 0xe6, 0x62, 0x41, 0x86, 0x27, 0x19, 0xfa, 0x5f, 0x0a, 0xc0, 0x78, 0xee,
	0x5d, 0x57, 0xfe, 0x16, 0x14, 0x64, 0x31, 0x87, 0x35, 0x9c, 0x66, 0xfb, 0x00, 0x19, 0xaa, 0xdb,
	0xe8, 0xf1, 0x54, 0x41, 0xa9, 0x37, 0x74, 0xbf, 0xc9, 0x3a, 0x6a, 0xc0, 0x1a, 0x2f, 0x51, 0x4c,
	0x06, 0xc4, 0x0a, 0x88, 0x2c, 0xa2, 0xc7, 0x90, 0xf5, 0x79, 0x44, 0xd4, 0xa6, 0x16, 0xb3, 0x51,
	0xc9, 0x91, 0x50, 0xfd, 0x14, 0xde, 0x9f, 0x51, 0x13, 0x66, 0xfc, 0x37, 0xb9, 0x5f, 0x57, 0x20,
	0x2b, 0x82, 0xef, 0x3a, 0xfd, 0xc6, 0xf8, 0x00, 0xe9, 0x1b, 0x52, 0x2b, 0x41, 0xc8, 0x84, 0x12,
	0xf5, 0xad, 0x7e, 0xdf, 0xe9, 0x75, 0x03, 0x6f, 0xe0, 0x48, 0x43, 0xb6, 0x93, 0x8f, 0x6d, 0xb4,
	0x42, 0x1c, 0x2e, 0x0a, 0x1a, 0x1b, 0x69, 0x75, 0x50, 0xd9, 0x47, 0xf8, 0x16, 0xa2, 0x96, 0x7f,
	0x41, 0xe8, 0x4d, 0x6f, 0xa1, 0x29, 0xa5, 0x36, 0x83, 0x63, 0x49, 0xd3, 0x1a, 0x50, 0x98, 0x88,
	0xa3, 0x0f, 0xa1, 0x34, 0x2e, 0x83, 0x6e, 0x94, 0xda, 0xe2, 0x38, 0x58, 0xb7, 0xc3, 0xd7, 0xa8,
	0x47, 0xfc, 0x5e, 0x98, 0xaf, 0x30, 0xcb, 0x2a, 0x96, 0xc3, 0xda, 0x9f, 0x19, 0xc8, 0x1e, 0xf1,
	0x65, 0xd1, 0x09, 0xc0, 0xf8, 0x2d, 0x82, 0xee, 0xce, 0x25, 0xc6, 0x0c, 0x1f, 0xf9, 0xda, 0x47,
	0x09, 0xed, 0x64, 0xe6, 0x09, 0xf3, 0x0a, 0xee, 0xc4, 0xdc, 0x69, 0x89, 0xaa, 0x46, 0x82, 0x6a,
	0xd2, 0x9d, 0x78, 0x09, 0xef, 0xcd, 0x34, 0x0c, 0xf4, 0xc9, 0xd2, 0x7d, 0x4e, 0x7b, 0xb8, 0x0c,
	0x54, 0xac, 0x74, 0x00, 0xab, 0xc7, 0x84, 0x36, 0x2c, 0x4a, 0xc4, 0x19, 0x13, 0xcf, 0x90, 0xf8,
	0x4a, 0x43, 0x6d, 0x58, 0x8f, 0x34, 0x66, 0x2e, 0xe2, 0x24, 0xb1, 0xc5, 0x37, 0x3c, 0x7a, 0x09,
	0x85, 0x89, 0x27, 0x28, 0x8a, 0x33, 0x66, 0xfe, 0xa1, 0xab, 0x3d, 0x58, 0x04, 0x13, 0xe7, 0x7e,
	0x23, 0x3b, 0xca, 0xcc, 0xaa, 0x46, 0x22, 0x3f, 0xf6, 0xe9, 0xa5, 0xed, 0x2c, 0x8d, 0x17, 0x0b,
	0xff, 0x08, 0xe5, 0xd9, 0xdb, 0x16, 0x3d, 0x4c, 0x14, 0x99, 0xbb, 0xec, 0xb5, 0x4f, 0x97, 0xc2,
	0x8a, 0xc5, 0xce, 0xa1, 0x34, 0xd5, 0xe9, 0xd0, 0xc7, 0x89, 0xec, 0xe9, 0xce, 0xaa, 0x55, 0x17,
	0x03, 0xf9, 0x1a, 0xe7, 0x19, 0x66, 0xed, 0xe7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x15, 0x87,
	0xe1, 0x42, 0x72, 0x0f, 0x00, 0x00,
}
