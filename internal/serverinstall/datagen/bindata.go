// Code generated by go-bindata.
// sources:
// bindata.go
// ../data/k8s-install/app.yaml
// DO NOT EDIT!

package datagen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genBindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func genBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_genBindataGo,
		"gen/bindata.go",
	)
}

func genBindataGo() (*asset, error) {
	bytes, err := genBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1600289402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _k8sInstallAppYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6b\x1b\x3d\x10\xbe\xef\xaf\x18\x4c\x8e\xef\x26\xb6\xe1\x6d\xa9\x20\x87\xb6\x87\x52\x48\x52\x53\x97\xf6\x50\x7a\x18\x6b\x27\x8e\x88\xbe\x2a\x69\xb7\x18\xe3\xff\x5e\x56\x2b\xef\x4a\x8e\x9d\x43\x65\x30\x96\x9e\x99\x67\x3e\x1f\xd7\x75\x5d\xa1\x15\xdf\xc9\x79\x61\x34\x83\x6e\x51\x3d\x0b\xdd\x30\x58\x93\xeb\x04\xa7\x4a\x51\xc0\x06\x03\xb2\x0a\x40\xa3\x22\x06\xfb\x3d\x5c\x27\xf4\x01\x15\xc1\xe1\x90\x20\x6f\x91\x27\xfc\xe1\x78\x1d\xd0\xfd\x1e\xc4\xe3\xe8\xf5\x5e\x6b\x13\x30\x08\xa3\x3d\xd4\x11\xc7\xe9\x85\x45\xf3\x1a\x1c\xea\x2d\xc1\xd5\x33\xed\xfe\x83\xab\x0e\x65\x4b\xc0\x6e\xcf\x52\x44\x86\x18\xa3\xb7\x86\xc3\x81\xc1\xac\xbf\x0c\x4e\x87\xc3\x2c\x31\x92\x6e\x8e\xd9\x8c\x17\x6f\x89\xf7\x11\xad\x71\x21\x86\xae\xe3\x4f\x06\xef\xde\xce\x17\x91\x76\xa8\x79\xeb\x2c\x2f\xd1\x65\x86\x3e\x85\x60\x2b\x00\x4f\x92\x78\x30\x8e\x45\x08\xad\x65\xf0\x07\x77\xd6\x08\x1d\x6a\x4f\xae\x23\x57\x01\x84\x9d\x25\x06\x77\x06\x9b\x0f\x28\x51\x73\x72\xd5\xe9\x0c\xd0\x5a\x7f\x33\x0d\x22\x60\xa0\xc7\x56\xae\x29\x9c\x19\xc6\xcb\x00\xaf\x4f\x42\xe2\x86\xa4\x7f\x25\xc3\x63\x47\xca\x62\x14\x06\xfe\x74\x97\xf9\x5e\xac\xcf\x4f\x9b\x71\xb6\x7c\x52\x56\x62\xa0\x44\x9b\xd5\xd3\x1f\x59\x44\xb8\x18\x03\xe0\x98\x65\x1a\x7c\xbf\x5c\x9f\x15\x6e\x69\xd5\x4a\xb9\x26\xee\x28\xa4\xcd\xea\x8f\x28\x91\x91\xbf\xce\x16\xfa\xd4\x7b\x74\x2e\x36\xa7\x3f\xdc\xe8\x80\x42\x93\x7b\xc1\x93\xe5\x37\x86\x9d\xe4\x42\x2e\xc6\x98\x88\xb2\xc4\x56\x46\x0a\xbe\x3b\xc9\x64\x78\xcc\xed\xb9\x51\x0a\x75\x33\xf5\xa7\x86\xd9\xb1\x3b\xb3\xa9\x69\x6e\xeb\x73\x93\x93\xb4\x6a\xa8\xbb\xae\xcb\xaf\xcd\xe6\xf6\xa6\x9f\x42\xfc\xba\x6e\x36\x39\x26\x85\x0f\xa4\xeb\x7e\xff\x6f\xe7\xd7\xf1\xc3\x46\x6d\x94\x36\xbd\x0a\x72\x9b\xe5\x68\x33\xaa\xeb\xe8\x32\xf6\x70\x55\x8a\x6d\x38\x85\xe4\x2e\xbb\x2c\x5f\xb8\x24\x1d\xa6\x5d\x12\x1d\x69\xf2\x7e\xe5\xcc\x86\x58\x66\x1b\xb8\x5d\x1b\xfe\x4c\x21\x7f\x84\xa4\xec\x22\xea\xbf\x51\x14\x59\x38\xf2\xa6\x75\x9c\x7c\x6e\xe9\xe8\x77\x4b\x3e\xf8\xd2\x9b\xdb\x96\xc1\x62\x3e\x57\xc5\xab\x22\x65\xdc\x8e\xc1\xf2\xff\x37\xf7\x62\x44\x3a\x23\x5b\x45\xf7\xa6\xd5\x65\x63\x87\x3e\xf4\x73\xcc\x48\x54\x6f\xb6\xc2\xf0\xc4\xe0\x26\x41\x83\xff\x47\x89\x42\x7d\x4b\x8a\x4c\x7f\x7f\xa7\x92\x3c\x61\xcc\x85\x87\x9c\x93\xf7\xf7\xa6\x21\xcf\xe0\x27\xcc\xbe\x12\x36\x3f\x9c\x08\xf4\x45\x73\x9a\xc1\xaf\xea\x62\x0b\xce\x35\xc0\x07\xe3\xa2\x60\x16\x9f\x44\xf5\x37\x00\x00\xff\xff\x77\xd4\x2e\xc3\x97\x06\x00\x00")

func k8sInstallAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sInstallAppYaml,
		"k8s-install/app.yaml",
	)
}

func k8sInstallAppYaml() (*asset, error) {
	bytes, err := k8sInstallAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-install/app.yaml", size: 1687, mode: os.FileMode(420), modTime: time.Unix(1600289359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen/bindata.go": genBindataGo,
	"k8s-install/app.yaml": k8sInstallAppYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gen": &bintree{nil, map[string]*bintree{
		"bindata.go": &bintree{genBindataGo, map[string]*bintree{}},
	}},
	"k8s-install": &bintree{nil, map[string]*bintree{
		"app.yaml": &bintree{k8sInstallAppYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

