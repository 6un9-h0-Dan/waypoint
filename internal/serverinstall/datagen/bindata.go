// Package datagen Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../data/k8s-install/app.yaml
package datagen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _k8sInstallAppYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x5b\x6b\x1b\x3d\x10\x7d\xdf\x5f\x31\x98\x3c\x7e\x8a\xed\x0f\xda\x52\x41\x1e\x7a\x81\x12\x48\xdc\x25\x81\xf4\x79\xac\x9d\x38\x22\xba\x55\xd2\x6e\x59\x8c\xff\x7b\xd1\xde\xac\xb5\x9d\x54\x06\xb3\x9a\x39\x73\x34\x73\x38\xc3\x18\x2b\xd0\xc9\x27\xf2\x41\x5a\xc3\xa1\x59\x17\xaf\xd2\x54\x1c\x1e\xc9\x37\x52\x50\xa1\x29\x62\x85\x11\x79\x01\x60\x50\x13\x87\xfd\x1e\xae\x87\xec\x06\x35\xc1\xe1\x30\xa4\x82\x43\x31\xe4\x37\xe3\xb5\xcf\xee\xf7\x20\x9f\xa7\xaa\x2f\xc6\xd8\x88\x51\x5a\x13\x80\x75\x79\x3c\x46\x78\x07\x67\xe0\xd1\xec\x08\xae\x5e\xa9\xfd\x0f\xae\x1a\x54\x35\x01\xbf\xb9\x48\xd1\x31\x74\x6f\x24\x34\x1c\x0e\x1c\x16\xe9\xd2\x17\x1d\x0e\x8b\x81\x91\x4c\x35\x76\x33\x5d\x82\x23\x91\x5e\x74\xd6\xc7\xee\x69\xd6\x7d\x72\xf8\xfc\x69\xb5\xee\x68\xfb\x99\x77\xde\x89\x02\x20\x90\x22\x11\xad\xe7\x5d\x0a\x9d\xe3\xf0\x07\x5b\x67\xa5\x89\x2c\x90\x6f\xc8\x17\x00\xb1\x75\xc4\xe1\xce\x62\xf5\x15\x15\x1a\x41\xbe\x38\x55\x19\x9d\x0b\xcb\x49\xea\xef\xe4\x94\x6d\x35\x99\x78\x41\xed\x73\xfe\xf7\xa5\x56\xb8\x25\x15\xde\x69\x70\x1c\x39\x44\x8f\x91\x76\x6d\x0f\xed\x9b\x7e\x20\xe1\x09\x23\x9d\x8d\xaa\x31\x8a\x97\xbb\x8c\xfa\xed\xe9\x49\x3b\x85\x91\x86\xba\x6c\x9e\x74\xd4\x8c\xe2\x4d\x12\x80\xb1\xcb\x74\x84\x35\x11\xa5\x21\x3f\x15\xb2\x41\x9c\xac\x20\x1d\xa9\x71\x97\x19\x94\xfc\x6d\x0a\x8c\x06\x99\x10\x65\xad\x54\x69\x95\x14\x2d\x87\xdb\xe7\x8d\x8d\xa5\xa7\x90\xd4\x1f\x51\xc2\x6a\x8d\xa6\x3a\xb6\xc9\x60\xb1\x1c\xbb\x5c\x1c\x9b\xf7\xbb\x90\x63\x4e\xba\x61\xc0\x9a\xa6\xc9\xaf\xd5\xf6\x66\x99\xd4\xe8\xfe\xae\xab\x6d\x9e\x53\x32\x44\x32\x2c\x19\xed\x66\x75\xdd\xfd\xf8\x64\xc2\x74\x26\x8b\x8e\x25\x93\x2c\xe5\xdc\xb1\xfd\x99\xf9\x76\x10\x5f\x36\x64\x28\x84\xd2\xdb\x2d\xf1\x0c\x1b\x85\x7b\xb4\xe2\x95\x62\x1e\x84\x61\x13\x66\x14\x9e\x82\xad\xbd\xa0\x90\x23\x3d\xfd\xae\x29\xc4\x30\xaf\x16\xae\xe6\xb0\x5e\xad\xf4\x2c\xaa\x49\x5b\xdf\x72\xf8\xff\xc3\xc7\x7b\x39\x65\x1a\xab\x6a\x4d\xf7\xb6\x36\xf3\x11\xfb\x21\x92\x5a\x19\x89\x4e\xb0\x12\xe3\x0b\x87\x65\x96\xea\x39\xce\x2c\x32\x2b\x76\x69\x01\x93\xce\xf1\xa9\x43\x7f\x53\x28\x75\xde\xb6\x48\x81\xcd\xa5\xc5\x63\xae\x11\x67\x7b\x3c\xad\x70\x79\x89\xf8\xdf\xdb\xdc\x91\x8e\x56\x47\x21\x28\x84\x7b\x5b\x8d\x43\x30\x78\x20\xac\x7e\x79\x19\xe9\xa7\x11\x69\x29\x4f\xe4\x3f\x15\x3e\x44\xeb\xbb\x0d\x58\xff\x90\xc5\xdf\x00\x00\x00\xff\xff\x57\x2e\xd2\xc3\xda\x05\x00\x00"

func k8sInstallAppYamlBytes() ([]byte, error) {
	return bindataRead(
		_k8sInstallAppYaml,
		"k8s-install/app.yaml",
	)
}

func k8sInstallAppYaml() (*asset, error) {
	bytes, err := k8sInstallAppYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "k8s-install/app.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"k8s-install/app.yaml": k8sInstallAppYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"k8s-install": &bintree{nil, map[string]*bintree{
		"app.yaml": &bintree{k8sInstallAppYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
