// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logs.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Logs struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Logs) Reset()         { *m = Logs{} }
func (m *Logs) String() string { return proto.CompactTextString(m) }
func (*Logs) ProtoMessage()    {}
func (*Logs) Descriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{0}
}

func (m *Logs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logs.Unmarshal(m, b)
}
func (m *Logs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logs.Marshal(b, m, deterministic)
}
func (m *Logs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logs.Merge(m, src)
}
func (m *Logs) XXX_Size() int {
	return xxx_messageInfo_Logs.Size(m)
}
func (m *Logs) XXX_DiscardUnknown() {
	xxx_messageInfo_Logs.DiscardUnknown(m)
}

var xxx_messageInfo_Logs proto.InternalMessageInfo

type Logs_Resp struct {
	// stream_id is the stream ID to connect to to get access to the
	// LogViewer service.
	StreamId             uint32   `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Logs_Resp) Reset()         { *m = Logs_Resp{} }
func (m *Logs_Resp) String() string { return proto.CompactTextString(m) }
func (*Logs_Resp) ProtoMessage()    {}
func (*Logs_Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{0, 0}
}

func (m *Logs_Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logs_Resp.Unmarshal(m, b)
}
func (m *Logs_Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logs_Resp.Marshal(b, m, deterministic)
}
func (m *Logs_Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logs_Resp.Merge(m, src)
}
func (m *Logs_Resp) XXX_Size() int {
	return xxx_messageInfo_Logs_Resp.Size(m)
}
func (m *Logs_Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Logs_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Logs_Resp proto.InternalMessageInfo

func (m *Logs_Resp) GetStreamId() uint32 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

type Logs_NextBatchResp struct {
	Events               []*Logs_Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Logs_NextBatchResp) Reset()         { *m = Logs_NextBatchResp{} }
func (m *Logs_NextBatchResp) String() string { return proto.CompactTextString(m) }
func (*Logs_NextBatchResp) ProtoMessage()    {}
func (*Logs_NextBatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{0, 1}
}

func (m *Logs_NextBatchResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logs_NextBatchResp.Unmarshal(m, b)
}
func (m *Logs_NextBatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logs_NextBatchResp.Marshal(b, m, deterministic)
}
func (m *Logs_NextBatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logs_NextBatchResp.Merge(m, src)
}
func (m *Logs_NextBatchResp) XXX_Size() int {
	return xxx_messageInfo_Logs_NextBatchResp.Size(m)
}
func (m *Logs_NextBatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_Logs_NextBatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_Logs_NextBatchResp proto.InternalMessageInfo

func (m *Logs_NextBatchResp) GetEvents() []*Logs_Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type Logs_Event struct {
	Partition            string               `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Contents             string               `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Logs_Event) Reset()         { *m = Logs_Event{} }
func (m *Logs_Event) String() string { return proto.CompactTextString(m) }
func (*Logs_Event) ProtoMessage()    {}
func (*Logs_Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{0, 2}
}

func (m *Logs_Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logs_Event.Unmarshal(m, b)
}
func (m *Logs_Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logs_Event.Marshal(b, m, deterministic)
}
func (m *Logs_Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logs_Event.Merge(m, src)
}
func (m *Logs_Event) XXX_Size() int {
	return xxx_messageInfo_Logs_Event.Size(m)
}
func (m *Logs_Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Logs_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Logs_Event proto.InternalMessageInfo

func (m *Logs_Event) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *Logs_Event) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Logs_Event) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

func init() {
	proto.RegisterType((*Logs)(nil), "proto.Logs")
	proto.RegisterType((*Logs_Resp)(nil), "proto.Logs.Resp")
	proto.RegisterType((*Logs_NextBatchResp)(nil), "proto.Logs.NextBatchResp")
	proto.RegisterType((*Logs_Event)(nil), "proto.Logs.Event")
}

func init() {
	proto.RegisterFile("logs.proto", fileDescriptor_782e6d65c19305b4)
}

var fileDescriptor_782e6d65c19305b4 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x4b, 0x4b, 0xfb, 0x40,
	0x14, 0xc5, 0xc9, 0xbf, 0x0f, 0x9a, 0xdb, 0x16, 0xfe, 0x0e, 0x22, 0x75, 0x2a, 0x58, 0x74, 0x53,
	0x37, 0x53, 0x88, 0x2e, 0xc4, 0x5d, 0x85, 0x0a, 0x42, 0x28, 0x12, 0xc5, 0xad, 0xa4, 0xe9, 0x74,
	0x0c, 0x24, 0xb9, 0x43, 0xe6, 0xd6, 0x07, 0x7e, 0x5d, 0x3f, 0x88, 0xcc, 0xa4, 0x0f, 0xad, 0xb8,
	0x1a, 0xee, 0x3d, 0x3f, 0xce, 0xdc, 0x73, 0x00, 0x32, 0x54, 0x46, 0xe8, 0x12, 0x09, 0x59, 0xc3,
	0x3d, 0xbc, 0xaf, 0x10, 0x55, 0x26, 0x47, 0x6e, 0x9a, 0x2d, 0x17, 0x23, 0x99, 0x6b, 0x7a, 0xaf,
	0x18, 0x7e, 0xbc, 0x2b, 0x52, 0x9a, 0x4b, 0x43, 0x71, 0xae, 0x57, 0x40, 0x47, 0x67, 0x4b, 0x95,
	0x16, 0xd5, 0x74, 0xf2, 0xe9, 0x41, 0x3d, 0x44, 0x65, 0xf8, 0x29, 0xd4, 0x23, 0x69, 0x34, 0xeb,
	0x83, 0x6f, 0xa8, 0x94, 0x71, 0xfe, 0x94, 0xce, 0x7b, 0xde, 0xc0, 0x1b, 0x76, 0xa3, 0x56, 0xb5,
	0xb8, 0x9d, 0xf3, 0x2b, 0xe8, 0x4e, 0xe5, 0x1b, 0x5d, 0xc7, 0x94, 0x3c, 0x3b, 0xfa, 0x0c, 0x9a,
	0xf2, 0x45, 0x16, 0x64, 0x7a, 0xde, 0xa0, 0x36, 0x6c, 0x07, 0x7b, 0x95, 0xad, 0xb0, 0x96, 0x62,
	0x62, 0x95, 0x68, 0x05, 0xf0, 0x0f, 0x68, 0xb8, 0x05, 0x3b, 0x02, 0x5f, 0xc7, 0x25, 0xa5, 0x94,
	0x62, 0xe1, 0x7e, 0xf0, 0xa3, 0xed, 0x82, 0x5d, 0x82, 0xbf, 0xb9, 0xb8, 0xf7, 0x6f, 0xe0, 0x0d,
	0xdb, 0x01, 0x17, 0x55, 0x26, 0xb1, 0xce, 0x24, 0x1e, 0xd6, 0x44, 0xb4, 0x85, 0x19, 0x87, 0x56,
	0x82, 0x05, 0xb9, 0x6b, 0x6a, 0xce, 0x76, 0x33, 0x07, 0x06, 0xda, 0x21, 0xaa, 0xbb, 0x2c, 0xa6,
	0x05, 0x96, 0x39, 0xbb, 0x80, 0x96, 0xbd, 0xf0, 0x5e, 0xcb, 0x84, 0x1d, 0xfc, 0x72, 0x9f, 0xd8,
	0x3a, 0xf9, 0xff, 0x55, 0x94, 0x9b, 0x65, 0x91, 0x58, 0x30, 0x60, 0xa2, 0xaa, 0x8a, 0xed, 0xef,
	0x28, 0x62, 0x5c, 0x2a, 0xb3, 0xe1, 0x5d, 0x74, 0x5b, 0x4e, 0x30, 0x05, 0x3f, 0x44, 0xf5, 0x98,
	0xca, 0x57, 0x59, 0xb2, 0x31, 0x74, 0x6c, 0x75, 0x21, 0x2a, 0xd7, 0xde, 0x9f, 0xdf, 0x1e, 0x7e,
	0xb7, 0xf9, 0x51, 0xf6, 0xac, 0xe9, 0x94, 0xf3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x38,
	0xa5, 0xc0, 0x13, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogPlatformClient is the client API for LogPlatform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogPlatformClient interface {
	LogsSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec2, error)
	Logs(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Logs_Resp, error)
}

type logPlatformClient struct {
	cc grpc.ClientConnInterface
}

func NewLogPlatformClient(cc grpc.ClientConnInterface) LogPlatformClient {
	return &logPlatformClient{cc}
}

func (c *logPlatformClient) LogsSpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec2, error) {
	out := new(FuncSpec2)
	err := c.cc.Invoke(ctx, "/proto.LogPlatform/LogsSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logPlatformClient) Logs(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Logs_Resp, error) {
	out := new(Logs_Resp)
	err := c.cc.Invoke(ctx, "/proto.LogPlatform/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogPlatformServer is the server API for LogPlatform service.
type LogPlatformServer interface {
	LogsSpec(context.Context, *empty.Empty) (*FuncSpec2, error)
	Logs(context.Context, *FuncSpec_Args) (*Logs_Resp, error)
}

// UnimplementedLogPlatformServer can be embedded to have forward compatible implementations.
type UnimplementedLogPlatformServer struct {
}

func (*UnimplementedLogPlatformServer) LogsSpec(ctx context.Context, req *empty.Empty) (*FuncSpec2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogsSpec not implemented")
}
func (*UnimplementedLogPlatformServer) Logs(ctx context.Context, req *FuncSpec_Args) (*Logs_Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}

func RegisterLogPlatformServer(s *grpc.Server, srv LogPlatformServer) {
	s.RegisterService(&_LogPlatform_serviceDesc, srv)
}

func _LogPlatform_LogsSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogPlatformServer).LogsSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LogPlatform/LogsSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogPlatformServer).LogsSpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogPlatform_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogPlatformServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LogPlatform/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogPlatformServer).Logs(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogPlatform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LogPlatform",
	HandlerType: (*LogPlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogsSpec",
			Handler:    _LogPlatform_LogsSpec_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _LogPlatform_Logs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logs.proto",
}

// LogViewerClient is the client API for LogViewer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogViewerClient interface {
	NextLogBatch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Logs_NextBatchResp, error)
}

type logViewerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogViewerClient(cc grpc.ClientConnInterface) LogViewerClient {
	return &logViewerClient{cc}
}

func (c *logViewerClient) NextLogBatch(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Logs_NextBatchResp, error) {
	out := new(Logs_NextBatchResp)
	err := c.cc.Invoke(ctx, "/proto.LogViewer/NextLogBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogViewerServer is the server API for LogViewer service.
type LogViewerServer interface {
	NextLogBatch(context.Context, *empty.Empty) (*Logs_NextBatchResp, error)
}

// UnimplementedLogViewerServer can be embedded to have forward compatible implementations.
type UnimplementedLogViewerServer struct {
}

func (*UnimplementedLogViewerServer) NextLogBatch(ctx context.Context, req *empty.Empty) (*Logs_NextBatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextLogBatch not implemented")
}

func RegisterLogViewerServer(s *grpc.Server, srv LogViewerServer) {
	s.RegisterService(&_LogViewer_serviceDesc, srv)
}

func _LogViewer_NextLogBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogViewerServer).NextLogBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LogViewer/NextLogBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogViewerServer).NextLogBatch(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogViewer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LogViewer",
	HandlerType: (*LogViewerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextLogBatch",
			Handler:    _LogViewer_NextLogBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logs.proto",
}
