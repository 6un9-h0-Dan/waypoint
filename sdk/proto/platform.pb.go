// Code generated by protoc-gen-go. DO NOT EDIT.
// source: platform.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Deploy struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deploy) Reset()         { *m = Deploy{} }
func (m *Deploy) String() string { return proto.CompactTextString(m) }
func (*Deploy) ProtoMessage()    {}
func (*Deploy) Descriptor() ([]byte, []int) {
	return fileDescriptor_platform_ecc05545e2a66882, []int{0}
}
func (m *Deploy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy.Unmarshal(m, b)
}
func (m *Deploy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy.Marshal(b, m, deterministic)
}
func (dst *Deploy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy.Merge(dst, src)
}
func (m *Deploy) XXX_Size() int {
	return xxx_messageInfo_Deploy.Size(m)
}
func (m *Deploy) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy proto.InternalMessageInfo

type Deploy_Args struct {
	// args is the list of argument types. This will include some of the
	// standard types in this file (in the Args message namespace) as well
	// as custom types declared by the FuncSpec that the plugin is expected
	// to understand how to decode.
	Args                 []*any.Any `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Deploy_Args) Reset()         { *m = Deploy_Args{} }
func (m *Deploy_Args) String() string { return proto.CompactTextString(m) }
func (*Deploy_Args) ProtoMessage()    {}
func (*Deploy_Args) Descriptor() ([]byte, []int) {
	return fileDescriptor_platform_ecc05545e2a66882, []int{0, 0}
}
func (m *Deploy_Args) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_Args.Unmarshal(m, b)
}
func (m *Deploy_Args) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_Args.Marshal(b, m, deterministic)
}
func (dst *Deploy_Args) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_Args.Merge(dst, src)
}
func (m *Deploy_Args) XXX_Size() int {
	return xxx_messageInfo_Deploy_Args.Size(m)
}
func (m *Deploy_Args) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_Args.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_Args proto.InternalMessageInfo

func (m *Deploy_Args) GetArgs() []*any.Any {
	if m != nil {
		return m.Args
	}
	return nil
}

type Deploy_Resp struct {
	// result is the resulting opaque data type
	Result               *any.Any `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deploy_Resp) Reset()         { *m = Deploy_Resp{} }
func (m *Deploy_Resp) String() string { return proto.CompactTextString(m) }
func (*Deploy_Resp) ProtoMessage()    {}
func (*Deploy_Resp) Descriptor() ([]byte, []int) {
	return fileDescriptor_platform_ecc05545e2a66882, []int{0, 1}
}
func (m *Deploy_Resp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deploy_Resp.Unmarshal(m, b)
}
func (m *Deploy_Resp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deploy_Resp.Marshal(b, m, deterministic)
}
func (dst *Deploy_Resp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deploy_Resp.Merge(dst, src)
}
func (m *Deploy_Resp) XXX_Size() int {
	return xxx_messageInfo_Deploy_Resp.Size(m)
}
func (m *Deploy_Resp) XXX_DiscardUnknown() {
	xxx_messageInfo_Deploy_Resp.DiscardUnknown(m)
}

var xxx_messageInfo_Deploy_Resp proto.InternalMessageInfo

func (m *Deploy_Resp) GetResult() *any.Any {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Deploy)(nil), "proto.Deploy")
	proto.RegisterType((*Deploy_Args)(nil), "proto.Deploy.Args")
	proto.RegisterType((*Deploy_Resp)(nil), "proto.Deploy.Resp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlatformClient is the client API for Platform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlatformClient interface {
	ConfigStruct(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeploySpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Deploy(ctx context.Context, in *Deploy_Args, opts ...grpc.CallOption) (*Deploy_Resp, error)
	// component.Destroyer optional implementation
	IsDestroyer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	DestroySpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Destroy(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*empty.Empty, error)
	// IsLogPlatform returns true if this platform also implements LogPlatform.
	IsLogPlatform(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
}

type platformClient struct {
	cc *grpc.ClientConn
}

func NewPlatformClient(cc *grpc.ClientConn) PlatformClient {
	return &platformClient{cc}
}

func (c *platformClient) ConfigStruct(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/proto.Platform/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Platform/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) DeploySpec(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/proto.Platform/DeploySpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Deploy(ctx context.Context, in *Deploy_Args, opts ...grpc.CallOption) (*Deploy_Resp, error) {
	out := new(Deploy_Resp)
	err := c.cc.Invoke(ctx, "/proto.Platform/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) IsDestroyer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/proto.Platform/IsDestroyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) DestroySpec(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/proto.Platform/DestroySpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Destroy(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Platform/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) IsLogPlatform(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/proto.Platform/IsLogPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformServer is the server API for Platform service.
type PlatformServer interface {
	ConfigStruct(context.Context, *empty.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*empty.Empty, error)
	DeploySpec(context.Context, *Empty) (*FuncSpec, error)
	Deploy(context.Context, *Deploy_Args) (*Deploy_Resp, error)
	// component.Destroyer optional implementation
	IsDestroyer(context.Context, *empty.Empty) (*ImplementsResp, error)
	DestroySpec(context.Context, *empty.Empty) (*FuncSpec, error)
	Destroy(context.Context, *FuncSpec_Args) (*empty.Empty, error)
	// IsLogPlatform returns true if this platform also implements LogPlatform.
	IsLogPlatform(context.Context, *empty.Empty) (*ImplementsResp, error)
}

func RegisterPlatformServer(s *grpc.Server, srv PlatformServer) {
	s.RegisterService(&_Platform_serviceDesc, srv)
}

func _Platform_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Platform/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).ConfigStruct(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Platform/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_DeploySpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).DeploySpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Platform/DeploySpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).DeploySpec(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deploy_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Platform/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Deploy(ctx, req.(*Deploy_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_IsDestroyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).IsDestroyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Platform/IsDestroyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).IsDestroyer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_DestroySpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).DestroySpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Platform/DestroySpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).DestroySpec(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Platform/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Destroy(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_IsLogPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).IsLogPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Platform/IsLogPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).IsLogPlatform(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Platform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Platform",
	HandlerType: (*PlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigStruct",
			Handler:    _Platform_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Platform_Configure_Handler,
		},
		{
			MethodName: "DeploySpec",
			Handler:    _Platform_DeploySpec_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _Platform_Deploy_Handler,
		},
		{
			MethodName: "IsDestroyer",
			Handler:    _Platform_IsDestroyer_Handler,
		},
		{
			MethodName: "DestroySpec",
			Handler:    _Platform_DestroySpec_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Platform_Destroy_Handler,
		},
		{
			MethodName: "IsLogPlatform",
			Handler:    _Platform_IsLogPlatform_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform.proto",
}

func init() { proto.RegisterFile("platform.proto", fileDescriptor_platform_ecc05545e2a66882) }

var fileDescriptor_platform_ecc05545e2a66882 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x5d, 0x4b, 0x32, 0x41,
	0x14, 0x46, 0xf4, 0xf5, 0xad, 0xa3, 0x15, 0x0c, 0x16, 0x36, 0x41, 0x48, 0x57, 0x42, 0x31, 0x8a,
	0x45, 0xdd, 0x44, 0x24, 0x5a, 0x20, 0x74, 0x11, 0xfa, 0x0b, 0x54, 0x8e, 0x83, 0x30, 0x3b, 0x33,
	0xcd, 0xc7, 0xc5, 0xfe, 0xda, 0xfe, 0x4a, 0x38, 0x33, 0x2b, 0xb4, 0xb2, 0x17, 0x5d, 0x2d, 0xe7,
	0x3c, 0x1f, 0xe7, 0x99, 0x67, 0xe1, 0x54, 0x8b, 0xa5, 0xdb, 0x28, 0x93, 0x31, 0x6d, 0x94, 0x53,
	0xe4, 0x5f, 0xf8, 0xd0, 0x4b, 0xae, 0x14, 0x17, 0x38, 0x08, 0xd3, 0xca, 0x6f, 0x06, 0x4b, 0x99,
	0x47, 0x06, 0xbd, 0x2a, 0x43, 0x98, 0x69, 0x57, 0x80, 0x6d, 0x2d, 0x3c, 0xdf, 0xca, 0x38, 0xdd,
	0x68, 0x68, 0x4e, 0x51, 0x0b, 0x95, 0xd3, 0x21, 0x34, 0xc6, 0x86, 0x5b, 0xd2, 0x87, 0xc6, 0xd2,
	0x70, 0xdb, 0xad, 0xf5, 0xea, 0xfd, 0xd6, 0xa8, 0xc3, 0xa2, 0x17, 0x2b, 0xbc, 0xd8, 0x58, 0xe6,
	0xf3, 0xc0, 0xa0, 0x0f, 0xd0, 0x98, 0xa3, 0xd5, 0xe4, 0x0e, 0x9a, 0x06, 0xad, 0x17, 0xae, 0x5b,
	0xeb, 0xd5, 0x2a, 0x35, 0x89, 0x33, 0xfa, 0xae, 0xc3, 0xd1, 0x67, 0x7a, 0x11, 0x79, 0x85, 0xf6,
	0x44, 0xc9, 0xcd, 0x96, 0x2f, 0x9c, 0xf1, 0x6b, 0x47, 0x2e, 0x0e, 0xa4, 0x6f, 0xbb, 0xe8, 0xb4,
	0x1b, 0x17, 0x2c, 0x92, 0x59, 0x64, 0x87, 0xe3, 0x13, 0x38, 0x8e, 0x4b, 0x6f, 0x90, 0x5c, 0xff,
	0xa6, 0xed, 0x81, 0x39, 0x7e, 0x79, 0xb4, 0x8e, 0x56, 0xd8, 0x93, 0x5b, 0x80, 0xd8, 0xc2, 0x42,
	0xe3, 0x9a, 0xb4, 0x93, 0x4b, 0x3c, 0x7d, 0x96, 0xa6, 0x77, 0x2f, 0xd7, 0x01, 0x1e, 0x16, 0x95,
	0x11, 0x92, 0xa0, 0x38, 0xb2, 0x5d, 0x7d, 0xb4, 0xb4, 0x0b, 0x19, 0x9f, 0xa1, 0x35, 0xb3, 0x53,
	0xb4, 0xce, 0xa8, 0x1c, 0x4d, 0xe5, 0x23, 0xcf, 0x93, 0x74, 0x96, 0x69, 0x81, 0x19, 0x4a, 0x67,
	0x83, 0xfa, 0x11, 0x5a, 0x49, 0x1b, 0xce, 0x57, 0xa9, 0x0f, 0x72, 0x3e, 0xc1, 0xff, 0xa4, 0x23,
	0x9d, 0x12, 0x16, 0xa3, 0x56, 0xb5, 0xf1, 0x02, 0x27, 0x33, 0xfb, 0xa1, 0xf8, 0xfe, 0x2f, 0xfd,
	0x2d, 0xf0, 0xaa, 0x19, 0xb6, 0xf7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x27, 0xef, 0xd8,
	0xb9, 0x02, 0x00, 0x00,
}
